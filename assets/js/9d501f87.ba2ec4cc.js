"use strict";(self.webpackChunkchaos_mesh_website=self.webpackChunkchaos_mesh_website||[]).push([[10200],{3905:(e,n,a)=>{a.d(n,{Zo:()=>d,kt:()=>u});var t=a(67294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=t.createContext({}),p=function(e){var n=t.useContext(i),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},d=function(e){var n=p(e.components);return t.createElement(i.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(a),u=r,h=c["".concat(i,".").concat(u)]||c[u]||m[u]||l;return a?t.createElement(h,o(o({ref:n},d),{},{components:a})):t.createElement(h,o({ref:n},d))}));function u(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=c;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<l;p++)o[p]=a[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}c.displayName="MDXCreateElement"},42732:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var t=a(87462),r=(a(67294),a(3905));const l={title:"Serial and Parallel Experiments"},o=void 0,s={unversionedId:"run-chaos-experiments-in-serial-or-parallel",id:"version-2.0.7/run-chaos-experiments-in-serial-or-parallel",title:"Serial and Parallel Experiments",description:"Chaos Mesh Workflow offers two ways of scheduling experiments: serial and parallel. You can configure and schedule multiple experiments as needed.",source:"@site/versioned_docs/version-2.0.7/run-chaos-experiments-in-serial-or-parallel.md",sourceDirName:".",slug:"/run-chaos-experiments-in-serial-or-parallel",permalink:"/docs/2.0.7/run-chaos-experiments-in-serial-or-parallel",draft:!1,editUrl:"https://github.com/chaos-mesh/website/edit/master/versioned_docs/version-2.0.7/run-chaos-experiments-in-serial-or-parallel.md",tags:[],version:"2.0.7",frontMatter:{title:"Serial and Parallel Experiments"},sidebar:"version-2.0.7/docs",previous:{title:"Create Chaos Mesh Workflow",permalink:"/docs/2.0.7/create-chaos-mesh-workflow"},next:{title:"Check Workflow Status",permalink:"/docs/2.0.7/check-workflow-status"}},i={},p=[{value:"Serial experiments",id:"serial-experiments",level:2},{value:"Parallel experiments",id:"parallel-experiments",level:2}],d={toc:p};function m(e){let{components:n,...a}=e;return(0,r.kt)("wrapper",(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Chaos Mesh Workflow offers two ways of scheduling experiments: serial and parallel. You can configure and schedule multiple experiments as needed."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If you want to schedule multiple chaos experiments in sequence, use serial nodes."),(0,r.kt)("li",{parentName:"ul"},"If you want to perform multiple chaos experiments simultaneously, use parallel nodes.")),(0,r.kt)("p",null,"Chaos Mesh uses ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Composite_pattern"},"composite pattern")," when designing serial and parallel nodes. It can contain multiple nodes of different types and run the composite nodes in a specific mode. This also means that you can nest the serial and parallel nodes to achieve complicated scheduling."),(0,r.kt)("h2",{id:"serial-experiments"},"Serial experiments"),(0,r.kt)("p",null,"When you create ",(0,r.kt)("inlineCode",{parentName:"p"},"templates")," in Workflow, use ",(0,r.kt)("inlineCode",{parentName:"p"},"templateType: Serial")," to claim a serial node."),(0,r.kt)("p",null,"Another required field in serial nodes is ",(0,r.kt)("inlineCode",{parentName:"p"},"children"),". Its type is ",(0,r.kt)("inlineCode",{parentName:"p"},"[]string")," and value is the name of other ",(0,r.kt)("inlineCode",{parentName:"p"},"template"),". For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: chaos-mesh.org/v1alpha1\nkind: Workflow\nmetadata:\n  name: try-workflow-serial\nspec:\n  entry: serial-of-3-node\n  templates:\n    - name: serial-of-3-node\n      templateType: Serial\n      deadline: 240s\n      children:\n        - workflow-stress-chaos\n        - suspending\n        - workflow-network-chaos\n    - name: suspending\n      templateType: Suspend\n      deadline: 10s\n    - name: workflow-network-chaos\n      templateType: NetworkChaos\n      deadline: 20s\n      networkChaos:\n        direction: to\n        action: delay\n        mode: all\n        selector:\n          labelSelectors:\n            'app': 'hello-kubernetes'\n        delay:\n          latency: '90ms'\n          correlation: '25'\n          jitter: '90ms'\n    - name: workflow-stress-chaos\n      templateType: StressChaos\n      deadline: 20s\n      stressChaos:\n        mode: one\n        selector:\n          labelSelectors:\n            'app': 'hello-kubernetes'\n        stressors:\n          cpu:\n            workers: 1\n            load: 20\n            options: ['--cpu 1', '--timeout 600']\n")),(0,r.kt)("p",null,"The above commands claims a serial node named ",(0,r.kt)("inlineCode",{parentName:"p"},"serial-of-3-node"),". This means Chaos Mesh executes sequentially ",(0,r.kt)("inlineCode",{parentName:"p"},"workflow-stress-chaos"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"suspending"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"workflow-network-chaos"),". After all tasks are completed, serial nodes are marked as completed."),(0,r.kt)("p",null,"When Chaos Mesh executes the serial node, tasks claimed in ",(0,r.kt)("inlineCode",{parentName:"p"},"children")," are run sequentially to ensure that only one task is running at the same time."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"deadline")," field in serial nodes is optional to limit the maximum duration of the entire serial process. Once this duration is running out, the sub-nodes are stopped and the nodes that are not executed yet will not be executed. If all sub-nodes finish their work before ",(0,r.kt)("inlineCode",{parentName:"p"},"deadline")," time, serial nodes are immediately marked as completed and ",(0,r.kt)("inlineCode",{parentName:"p"},"deadline")," is not affected."),(0,r.kt)("h2",{id:"parallel-experiments"},"Parallel experiments"),(0,r.kt)("p",null,"When you create ",(0,r.kt)("inlineCode",{parentName:"p"},"templates")," in Workflow, use ",(0,r.kt)("inlineCode",{parentName:"p"},"templateType: Parallel")," to claim a parallel node."),(0,r.kt)("p",null,"Another required field in parallel nodes is ",(0,r.kt)("inlineCode",{parentName:"p"},"children"),". Its type is ",(0,r.kt)("inlineCode",{parentName:"p"},"[]string")," and values are the names of other ",(0,r.kt)("inlineCode",{parentName:"p"},"template"),". For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: chaos-mesh.org/v1alpha1\nkind: Workflow\nmetadata:\n  name: try-workflow-parallel\nspec:\n  entry: parallel-of-2-chaos\n  templates:\n    - name: parallel-of-2-chaos\n      templateType: Parallel\n      deadline: 240s\n      children:\n        - workflow-stress-chaos\n        - workflow-network-chaos\n    - name: workflow-network-chaos\n      templateType: NetworkChaos\n      deadline: 20s\n      networkChaos:\n        direction: to\n        action: delay\n        mode: all\n        selector:\n          labelSelectors:\n            'app': 'hello-kubernetes'\n        delay:\n          latency: '90ms'\n          correlation: '25'\n          jitter: '90ms'\n    - name: workflow-stress-chaos\n      templateType: StressChaos\n      deadline: 20s\n      stressChaos:\n        mode: one\n        selector:\n          labelSelectors:\n            'app': 'hello-kubernetes'\n        stressors:\n          cpu:\n            workers: 1\n            load: 20\n            options: ['--cpu 1', '--timeout 600']\n")),(0,r.kt)("p",null,"The above commands claimed a parallel node named ",(0,r.kt)("inlineCode",{parentName:"p"},"parallel-of-2-chaos"),". This means Chaos Mesh executes simultaneously ",(0,r.kt)("inlineCode",{parentName:"p"},"workflow-stress-chaos")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"workflow-network-chaos"),". After all tasks are completed, parallel nodes are marked as completed."),(0,r.kt)("p",null,"When Chaos Mesh executes parallel nodes, all tasks claimed in ",(0,r.kt)("inlineCode",{parentName:"p"},"children")," are executed simultaneously."),(0,r.kt)("p",null,"Similar to serial nodes, the optional field ",(0,r.kt)("inlineCode",{parentName:"p"},"deadline")," is also available in parallel nodes to limit the maximum execution time of the entire parallel process. If this time is reached, the sub-nodes are stopped. If all sub-nodes finish their work before ",(0,r.kt)("inlineCode",{parentName:"p"},"deadline")," time, parallel nodes are immediately marked as completed and ",(0,r.kt)("inlineCode",{parentName:"p"},"deadline")," is not affected."))}m.isMDXComponent=!0}}]);