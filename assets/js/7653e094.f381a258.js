"use strict";(self.webpackChunkchaos_mesh_website=self.webpackChunkchaos_mesh_website||[]).push([[59271],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,f=u["".concat(s,".").concat(m)]||u[m]||c[m]||i;return n?o.createElement(f,r(r({ref:t},d),{},{components:n})):o.createElement(f,r({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var p=2;p<i;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},57501:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var o=n(87462),a=(n(67294),n(3905));const i={title:"PodChaos Experiment"},r=void 0,l={unversionedId:"user_guides/podchaos",id:"version-0.9.1/user_guides/podchaos",title:"PodChaos Experiment",description:"This document introduces how to create PodChaos experiments.",source:"@site/versioned_docs/version-0.9.1/user_guides/podchaos.md",sourceDirName:"user_guides",slug:"/user_guides/podchaos",permalink:"/docs/0.9.1/user_guides/podchaos",draft:!1,editUrl:"https://github.com/chaos-mesh/website/edit/master/versioned_docs/version-0.9.1/user_guides/podchaos.md",tags:[],version:"0.9.1",frontMatter:{title:"PodChaos Experiment"},sidebar:"version-0.9.1/docs",previous:{title:"Run Chaos Experiment",permalink:"/docs/0.9.1/user_guides/run_chaos_experiment"},next:{title:"NetworkChaos Experiment",permalink:"/docs/0.9.1/user_guides/networkchaos"}},s={},p=[{value:"<code>pod-failure</code> configuration file",id:"pod-failure-configuration-file",level:2},{value:"<code>pod-kill</code> configuration file",id:"pod-kill-configuration-file",level:2}],d={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This document introduces how to create PodChaos experiments."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Note:")),(0,a.kt)("p",{parentName:"blockquote"},"Currently, Chaos Mesh does not support simulation injection of naked pods. And it only supports some specific pods, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"deployment"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"statefulset"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"daemonset"),".")),(0,a.kt)("p",null,"PodChaos allows you to simulate pod faults, specifically ",(0,a.kt)("inlineCode",{parentName:"p"},"pod failure")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"pod kill"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"pod failure")," can be used to simulate a situation where a pod is down. In this case, the pod is unavailable for a long time."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Pod Failure")," action periodically injects errors to pods. And it will cause pod creation failure for a while. In other words, the selected pod will be unavailable in a specified period.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Pod Kill")," action kills the specified pod (ReplicaSet or something similar might be needed to ensure the pod will be restarted)."))),(0,a.kt)("h2",{id:"pod-failure-configuration-file"},(0,a.kt)("inlineCode",{parentName:"h2"},"pod-failure")," configuration file"),(0,a.kt)("p",null,"Below is a sample ",(0,a.kt)("inlineCode",{parentName:"p"},"pod-failure")," configuration file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: chaos-mesh.org/v1alpha1\nkind: PodChaos\nmetadata:\n  name: pod-failure-example\n  namespace: chaos-testing\nspec:\n  action: pod-failure\n  mode: one\n  value: ''\n  duration: '30s'\n  selector:\n    labelSelectors:\n      'app.kubernetes.io/component': 'tikv'\n  scheduler:\n    cron: '@every 2m'\n")),(0,a.kt)("p",null,"For more sample files, see ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/chaos-mesh/chaos-mesh/tree/master/examples"},"examples"),". You can edit them as needed."),(0,a.kt)("p",null,"Description:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"action")," defines the specific chaos action for the pod. In this case, it is pod failure."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"mode")," defines the mode to run chaos action. Supported mode: ",(0,a.kt)("inlineCode",{parentName:"li"},"one")," / ",(0,a.kt)("inlineCode",{parentName:"li"},"all")," / ",(0,a.kt)("inlineCode",{parentName:"li"},"fixed")," / ",(0,a.kt)("inlineCode",{parentName:"li"},"fixed-percent")," / ",(0,a.kt)("inlineCode",{parentName:"li"},"random-max-percent"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"value")," depends on the value of ",(0,a.kt)("inlineCode",{parentName:"li"},"mode"),". If ",(0,a.kt)("inlineCode",{parentName:"li"},"mode")," is ",(0,a.kt)("inlineCode",{parentName:"li"},"one")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"all"),", leave ",(0,a.kt)("inlineCode",{parentName:"li"},"value")," empty. If ",(0,a.kt)("inlineCode",{parentName:"li"},"fixed"),", provide an integer of pods to do chaos action. If ",(0,a.kt)("inlineCode",{parentName:"li"},"fixed-percent"),", provide a number from 0 to 100 to specify the percent of pods the server can do chaos action. If ",(0,a.kt)("inlineCode",{parentName:"li"},"random-max-percent"),", provide a number from 0 to 100 to specify the max percent of pods to do chaos action."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"duration")," defines the duration for each chaos experiment. The value of the ",(0,a.kt)("inlineCode",{parentName:"li"},"duration")," field is ",(0,a.kt)("inlineCode",{parentName:"li"},"30s"),", which indicates that pod failure will last 30 seconds."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"selector")," is used to select pods that are used to inject chaos actions. For more details, see ",(0,a.kt)("a",{parentName:"li",href:"/docs/0.9.1/user_guides/experiment_scope"},"Define the Scope of Chaos Experiment"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"scheduler")," defines the scheduler rules for the running time of the chaos experiment. For more rule information, see ",(0,a.kt)("a",{parentName:"li",href:"https://godoc.org/github.com/robfig/cron"},"robfig/cron"),".")),(0,a.kt)("h2",{id:"pod-kill-configuration-file"},(0,a.kt)("inlineCode",{parentName:"h2"},"pod-kill")," configuration file"),(0,a.kt)("p",null,"Below is a sample ",(0,a.kt)("inlineCode",{parentName:"p"},"pod-kill")," configuration file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: chaos-mesh.org/v1alpha1\nkind: PodChaos\nmetadata:\n  name: pod-kill-example\n  namespace: chaos-testing\nspec:\n  action: pod-kill\n  mode: one\n  selector:\n    namespaces:\n      - tidb-cluster-demo\n    labelSelectors:\n      'app.kubernetes.io/component': 'tikv'\n  scheduler:\n    cron: '@every 1m'\n")),(0,a.kt)("p",null,"The detailed description of each field in the configuration template are consistent with that in ",(0,a.kt)("a",{parentName:"p",href:"#pod-failure-configuration-file"},(0,a.kt)("inlineCode",{parentName:"a"},"pod-failure")),"."))}c.isMDXComponent=!0}}]);