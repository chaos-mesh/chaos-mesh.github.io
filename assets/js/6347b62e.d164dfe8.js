"use strict";(self.webpackChunkchaos_mesh_website=self.webpackChunkchaos_mesh_website||[]).push([[1343],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return u}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),p=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(i.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(t),u=r,h=m["".concat(i,".").concat(u)]||m[u]||d[u]||o;return t?a.createElement(h,l(l({ref:n},c),{},{components:t})):a.createElement(h,l({ref:n},c))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=m;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var p=2;p<o;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8636:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var a=t(87462),r=t(63366),o=(t(67294),t(3905)),l=["components"],s={title:"Serial and Parallel Experiments"},i=void 0,p={unversionedId:"run-chaos-experiments-in-serial-or-parallel",id:"run-chaos-experiments-in-serial-or-parallel",isDocsHomePage:!1,title:"Serial and Parallel Experiments",description:"Chaos Mesh Workflow offers two ways of scheduling experiments: serial and parallel. You can configure and schedule multiple experiments as needed.",source:"@site/docs/run-chaos-experiments-in-serial-or-parallel.md",sourceDirName:".",slug:"/run-chaos-experiments-in-serial-or-parallel",permalink:"/docs/next/run-chaos-experiments-in-serial-or-parallel",editUrl:"https://github.com/chaos-mesh/website/edit/master/docs/run-chaos-experiments-in-serial-or-parallel.md",tags:[],version:"current",frontMatter:{title:"Serial and Parallel Experiments"},sidebar:"docs",previous:{title:"Create Chaos Mesh Workflow",permalink:"/docs/next/create-chaos-mesh-workflow"},next:{title:"Check Workflow Status",permalink:"/docs/next/check-workflow-status"}},c=[{value:"Serial experiments",id:"serial-experiments",children:[]},{value:"Parallel experiments",id:"parallel-experiments",children:[]}],d={toc:c};function m(e){var n=e.components,t=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Chaos Mesh Workflow offers two ways of scheduling experiments: serial and parallel. You can configure and schedule multiple experiments as needed."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If you want to schedule multiple chaos experiments in sequence, use serial nodes."),(0,o.kt)("li",{parentName:"ul"},"If you want to perform multiple chaos experiments simultaneously, use parallel nodes.")),(0,o.kt)("p",null,"Chaos Mesh uses ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Composite_pattern"},"composite pattern")," when designing serial and parallel nodes. It can contain multiple nodes of different types and run the composite nodes in a specific mode. This also means that you can nest the serial and parallel nodes to achieve complicated scheduling."),(0,o.kt)("h2",{id:"serial-experiments"},"Serial experiments"),(0,o.kt)("p",null,"When you create ",(0,o.kt)("inlineCode",{parentName:"p"},"templates")," in Workflow, use ",(0,o.kt)("inlineCode",{parentName:"p"},"templateType: Serial")," to claim a serial node."),(0,o.kt)("p",null,"Another required field in serial nodes is ",(0,o.kt)("inlineCode",{parentName:"p"},"children"),". Its type is ",(0,o.kt)("inlineCode",{parentName:"p"},"[]string")," and value is the name of other ",(0,o.kt)("inlineCode",{parentName:"p"},"template"),". For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: chaos-mesh.org/v1alpha1\nkind: Workflow\nmetadata:\n  name: try-workflow-serial\nspec:\n  entry: serial-of-3-node\n  templates:\n    - name: serial-of-3-node\n      templateType: Serial\n      duration: 240s\n      children:\n        - workflow-stress-chaos\n        - suspending\n        - workflow-network-chaos\n    - name: suspending\n      templateType: Suspend\n      duration: 10s\n    - name: workflow-network-chaos\n      templateType: NetworkChaos\n      duration: 20s\n      networkChaos:\n        direction: to\n        action: delay\n        mode: all\n        selector:\n          labelSelectors:\n            'app': 'hello-kubernetes'\n        delay:\n          latency: '90ms'\n          correlation: '25'\n          jitter: '90ms'\n    - name: workflow-stress-chaos\n      templateType: StressChaos\n      duration: 20s\n      stressChaos:\n        mode: one\n        selector:\n          labelSelectors:\n            'app': 'hello-kubernetes'\n        stressors:\n          cpu:\n            workers: 1\n            load: 20\n            options: ['--cpu 1', '--timeout 600']\n")),(0,o.kt)("p",null,"The above commands claims a serial node named ",(0,o.kt)("inlineCode",{parentName:"p"},"serial-of-3-node"),". This means Chaos Mesh executes sequentially ",(0,o.kt)("inlineCode",{parentName:"p"},"workflow-stress-chaos"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"suspending"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"workflow-network-chaos"),". After all tasks are completed, serial nodes are marked as completed."),(0,o.kt)("p",null,"When Chaos Mesh executes the serial node, tasks claimed in ",(0,o.kt)("inlineCode",{parentName:"p"},"children")," are run sequentially to ensure that only one task is running at the same time."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"duration")," field in serial nodes is optional to limit the maximum duration of the entire serial process. Once this duration is running out, the sub-nodes are stopped and the nodes that are not executed yet will not be executed. If all sub-nodes finish their work before ",(0,o.kt)("inlineCode",{parentName:"p"},"duration")," time, serial nodes are immediately marked as completed and ",(0,o.kt)("inlineCode",{parentName:"p"},"duration")," is not affected."),(0,o.kt)("h2",{id:"parallel-experiments"},"Parallel experiments"),(0,o.kt)("p",null,"When you create ",(0,o.kt)("inlineCode",{parentName:"p"},"templates")," in Workflow, use ",(0,o.kt)("inlineCode",{parentName:"p"},"templateType: Parallel")," to claim a parallel node."),(0,o.kt)("p",null,"Another required field in parallel nodes is ",(0,o.kt)("inlineCode",{parentName:"p"},"children"),". Its type is ",(0,o.kt)("inlineCode",{parentName:"p"},"[]string")," and values are the names of other ",(0,o.kt)("inlineCode",{parentName:"p"},"template"),". For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: chaos-mesh.org/v1alpha1\nkind: Workflow\nmetadata:\n  name: try-workflow-parallel\nspec:\n  entry: parallel-of-2-chaos\n  templates:\n    - name: parallel-of-2-chaos\n      templateType: Parallel\n      duration: 240s\n      children:\n        - workflow-stress-chaos\n        - workflow-network-chaos\n    - name: workflow-network-chaos\n      templateType: NetworkChaos\n      duration: 20s\n      networkChaos:\n        direction: to\n        action: delay\n        mode: all\n        selector:\n          labelSelectors:\n            'app': 'hello-kubernetes'\n        delay:\n          latency: '90ms'\n          correlation: '25'\n          jitter: '90ms'\n    - name: workflow-stress-chaos\n      templateType: StressChaos\n      duration: 20s\n      stressChaos:\n        mode: one\n        selector:\n          labelSelectors:\n            'app': 'hello-kubernetes'\n        stressors:\n          cpu:\n            workers: 1\n            load: 20\n            options: ['--cpu 1', '--timeout 600']\n")),(0,o.kt)("p",null,"The above commands claimed a parallel node named ",(0,o.kt)("inlineCode",{parentName:"p"},"parallel-of-2-chaos"),". This means Chaos Mesh executes simultaneously ",(0,o.kt)("inlineCode",{parentName:"p"},"workflow-stress-chaos")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"workflow-network-chaos"),". After all tasks are completed, parallel nodes are marked as completed."),(0,o.kt)("p",null,"When Chaos Mesh executes parallel nodes, all tasks claimed in ",(0,o.kt)("inlineCode",{parentName:"p"},"children")," are executed simultaneously."),(0,o.kt)("p",null,"Similar to serial nodes, the optional field ",(0,o.kt)("inlineCode",{parentName:"p"},"duration")," is also available in parallel nodes to limit the maximum execution time of the entire parallel process. If this time is reached, the sub-nodes are stopped. If all sub-nodes finish their work before ",(0,o.kt)("inlineCode",{parentName:"p"},"duration")," time, parallel nodes are immediately marked as completed and ",(0,o.kt)("inlineCode",{parentName:"p"},"duration")," is not affected."))}m.isMDXComponent=!0}}]);