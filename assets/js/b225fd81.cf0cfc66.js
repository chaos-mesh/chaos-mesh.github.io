"use strict";(self.webpackChunkchaos_mesh_website=self.webpackChunkchaos_mesh_website||[]).push([[7193],{49613:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var n=a(59496);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),m=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=m(a),u=o,d=c["".concat(s,".").concat(u)]||c[u]||h[u]||i;return a?n.createElement(d,r(r({ref:t},p),{},{components:a})):n.createElement(d,r({ref:t},p))}));function d(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=a.length,r=new Array(i);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:o,r[1]=l;for(var m=2;m<i;m++)r[m]=a[m];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},53486:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var n=a(28957),o=(a(59496),a(49613));const i={title:"Configure the Development Environment"},r=void 0,l={unversionedId:"configure-development-environment",id:"version-2.6.2/configure-development-environment",title:"Configure the Development Environment",description:"This document describes how to configure a local development environment for Chaos Mesh.",source:"@site/versioned_docs/version-2.6.2/configure-development-environment.md",sourceDirName:".",slug:"/configure-development-environment",permalink:"/docs/configure-development-environment",draft:!1,editUrl:"https://github.com/chaos-mesh/website/edit/master/versioned_docs/version-2.6.2/configure-development-environment.md",tags:[],version:"2.6.2",frontMatter:{title:"Configure the Development Environment"},sidebar:"docs",previous:{title:"Developer Guide Overview",permalink:"/docs/developer-guide-overview"},next:{title:"Add a New Chaos Experiment Type",permalink:"/docs/add-new-chaos-experiment-type"}},s={},m=[{value:"Configuration Requirements",id:"configuration-requirements",level:2},{value:"Compiling Chaos Mesh",id:"compiling-chaos-mesh",level:2},{value:"Run Chaos Mesh in local minkube Kubernetes cluster",id:"run-chaos-mesh-in-local-minkube-kubernetes-cluster",level:2},{value:"Debug Chaos Mesh in local environment",id:"debug-chaos-mesh-in-local-environment",level:2},{value:"What&#39;s Next",id:"whats-next",level:2},{value:"FAQ",id:"faq",level:2},{value:"Run make fail with <code>error obtaining VCS status: exit status 128</code> in MacOS",id:"run-make-fail-with-error-obtaining-vcs-status-exit-status-128-in-macos",level:3}],p={toc:m},c="wrapper";function h(e){let{components:t,...a}=e;return(0,o.kt)(c,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This document describes how to configure a local development environment for Chaos Mesh."),(0,o.kt)("p",null,"Most components of Chaos Mesh are ",(0,o.kt)("strong",{parentName:"p"},"only designed for Linux"),", so we suggest that you also configure your development environment to run on Linux. For example, use a virtual machine or WSL 2 and use VSCode Remote as your editor."),(0,o.kt)("p",null,"This document assumes that you are using Linux, without the limitations of specific Linux distributions. If you insist on using Windows/MacOS, you may need some tricks to make it work for you (For example, some make targets may fail depending on the environment)."),(0,o.kt)("h2",{id:"configuration-requirements"},"Configuration Requirements"),(0,o.kt)("p",null,"Before configuring, it is recommended that you install the development tools listed below, most of them may already be installed in your environment:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.gnu.org/software/make/"},"make")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/install/"},"docker")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://go.dev/doc/install"},"golang"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"v1.18")," or later versions"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://gcc.gnu.org/"},"gcc")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://helm.sh/"},"helm"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"v3.9.0")," or later versions"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://minikube.sigs.k8s.io/docs/start/"},"minikube"))),(0,o.kt)("p",null,"Optional:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://nodejs.org/en/"},"nodejs")," and ",(0,o.kt)("a",{parentName:"li",href:"https://pnpm.io/"},"pnpm"),", for developing Chaos Dashboard")),(0,o.kt)("h2",{id:"compiling-chaos-mesh"},"Compiling Chaos Mesh"),(0,o.kt)("p",null,"After installing, follow the steps below to compile Chaos Mesh."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Clone the Chaos Mesh repository to your local server:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/chaos-mesh/chaos-mesh.git\ncd chaos-mesh\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Make sure that ",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/install/"},"Docker")," is installed and running."),(0,o.kt)("admonition",{parentName:"li",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Chaos Mesh relies on Docker to build container images, this is for consistency with the production environment."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Compile Chaos Mesh:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"UI=1 make image\n")),(0,o.kt)("admonition",{parentName:"li",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"UI=1")," means that we will compile the user interface of Chaos Dashboard, if you don't need it, you can omit this env.")),(0,o.kt)("admonition",{parentName:"li",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If you want to specify the tag of the image, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"UI=1 make IMAGE_TAG=dev image"),".")),(0,o.kt)("p",{parentName:"li"},"After compiling, you should get the following container images:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ghcr.io/chaos-mesh/chaos-dashboard:latest")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ghcr.io/chaos-mesh/chaos-mesh:latest")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ghcr.io/chaos-mesh/chaos-daemon:latest"))))),(0,o.kt)("h2",{id:"run-chaos-mesh-in-local-minkube-kubernetes-cluster"},"Run Chaos Mesh in local minkube Kubernetes cluster"),(0,o.kt)("p",null,"Now you can run Chaos Mesh in a local Kubernetes cluster after compiling."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Start a local Kubernetes cluster with minkube:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"minikube start\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Load container images into minikube:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"minikube image load ghcr.io/chaos-mesh/chaos-dashboard:latest\nminikube image load ghcr.io/chaos-mesh/chaos-mesh:latest\nminikube image load ghcr.io/chaos-mesh/chaos-daemon:latest\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Install Chaos Mesh by Helm:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"helm upgrade --install chaos-mesh-debug ./helm/chaos-mesh --namespace=chaos-mesh-debug --create-namespace\n")))),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"minikube image load")," would cost lots of time, so here is a trick to avoid load images again and again during development. Using docker from minikube node instead of host's docker:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'minikube start --mount --mount-string "$(pwd):$(pwd)"\neval $(minikube -p minikube docker-env)\nUI=1 make image\n'))),(0,o.kt)("h2",{id:"debug-chaos-mesh-in-local-environment"},"Debug Chaos Mesh in local environment"),(0,o.kt)("p",null,"We could use ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/go-delve/delve"},"delve")," with remote debugging to debug the Chaos Mesh in local environment."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Compile Chaos Mesh with ",(0,o.kt)("inlineCode",{parentName:"p"},"DEBUG=1"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"UI=1 DEBUG=1 make image\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Load container images into minikube:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"minikube image load ghcr.io/chaos-mesh/chaos-mesh:latest\nminikube image load ghcr.io/chaos-mesh/chaos-daemon:latest\nminikube image load ghcr.io/chaos-mesh/chaos-dashboard:latest\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Install Chaos Mesh and enable Remote Debugging:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"helm upgrade --install chaos-mesh-debug ./helm/chaos-mesh --namespace=chaos-mesh-debug --create-namespace --set chaosDlv.enable=true --set controllerManager.leaderElection.enabled=false\n")),(0,o.kt)("admonition",{parentName:"li",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"To ensure high availability, Chaos Mesh turns on ",(0,o.kt)("inlineCode",{parentName:"p"},"leader-election")," feature by default and will create 3 replicas for ",(0,o.kt)("inlineCode",{parentName:"p"},"chaos-controller-manager"),". We will use ",(0,o.kt)("inlineCode",{parentName:"p"},"controllerManager.leaderElection.enabled=false")," to ensure that Chaos Mesh only creates 1 instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"chaos-controller-manager")," for easier debugging."),(0,o.kt)("p",{parentName:"admonition"},"For more details, see ",(0,o.kt)("a",{parentName:"p",href:"/docs/production-installation-using-helm#step-4-install-chaos-mesh-in-different-environments"},"Install Chaos Mesh in different environments"),"."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Setup Port-Forwarding and Configure IDE To Connect the Remote Debugger:"),(0,o.kt)("p",{parentName:"li"},"We could use ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl port-forward")," to forward the delve debugging server to a local port."),(0,o.kt)("p",{parentName:"li"},"For example, if we want to debug ",(0,o.kt)("inlineCode",{parentName:"p"},"chaos-controller-manger"),", we could execute the following command:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n chaos-mesh-debug port-forward chaos-controller-manager-766dc8488d-7n5bq 58000:8000\n")),(0,o.kt)("p",{parentName:"li"},"Then we could access the remote delve debugger server with ",(0,o.kt)("inlineCode",{parentName:"p"},"127.0.0.1:58000"),"."),(0,o.kt)("admonition",{parentName:"li",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"We always use ",(0,o.kt)("inlineCode",{parentName:"p"},"8000")," in the pod for serving the delve debug server, that's a convention. You could find that in helm templates files.")),(0,o.kt)("p",{parentName:"li"},"Then we could configure our favorite IDE to connect to the remote debugger, below are some examples:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For Goland, see ",(0,o.kt)("a",{parentName:"p",href:"https://www.jetbrains.com/help/go/attach-to-running-go-processes-with-debugger.html#attach-to-a-process-on-a-remote-machine"},"Attach to running Go processes with the debugger#Attach to a process on a remote machine"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For VSCode, see ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/golang/vscode-go/blob/master/docs/debugging.md#remote-debugging"},"vscode-go - Debugging#Remote Debugging"),"."))))),(0,o.kt)("p",null,"For more detailed information, see ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/chaos-mesh/chaos-mesh/blob/master/images/chaos-dlv/README.md"},"README.md for container image chaos-dlv"),"."),(0,o.kt)("h2",{id:"whats-next"},"What's Next"),(0,o.kt)("p",null,"After finishing the above preparation, you can try to ",(0,o.kt)("a",{parentName:"p",href:"/docs/add-new-chaos-experiment-type"},"Add a New Chaos Experiment Type"),"."),(0,o.kt)("h2",{id:"faq"},"FAQ"),(0,o.kt)("h3",{id:"run-make-fail-with-error-obtaining-vcs-status-exit-status-128-in-macos"},"Run make fail with ",(0,o.kt)("inlineCode",{parentName:"h3"},"error obtaining VCS status: exit status 128")," in MacOS"),(0,o.kt)("p",null,"The reason is related to ",(0,o.kt)("a",{parentName:"p",href:"https://github.blog/2022-04-12-git-security-vulnerability-announced/"},"https://github.blog/2022-04-12-git-security-vulnerability-announced/"),". It's recommended you to read it first."),(0,o.kt)("p",null,"Chaos Mesh will start the container (",(0,o.kt)("inlineCode",{parentName:"p"},"dev-env")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"build-env"),") with the current user (when you call ",(0,o.kt)("inlineCode",{parentName:"p"},"make"),"). You can find the appropriate ",(0,o.kt)("inlineCode",{parentName:"p"},"--user")," flag in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/chaos-mesh/chaos-mesh/blob/813b650c02e0b065ae5c4707725c346929ab1847/build/get_env_shell.py#L81C10-L81C10"},"get_env_shell.py#L81C10-L81C10"),". So when Git is looking for a top-level ",(0,o.kt)("inlineCode",{parentName:"p"},".git")," directory, it will stop if its directory traversal changes ownership from the current user."),(0,o.kt)("p",null,"A temporary solution for now is to comment out the line of ",(0,o.kt)("inlineCode",{parentName:"p"},"--user"),"."))}h.isMDXComponent=!0}}]);