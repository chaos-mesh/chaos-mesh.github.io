"use strict";(self.webpackChunkchaos_mesh_website=self.webpackChunkchaos_mesh_website||[]).push([[2566],{68070:(e,t,o)=>{o.d(t,{Z:()=>m});var n=o(8714),a=o(43205),r=o(73622),l=o(85881),s=o(59496),i=o(16682),p=o.n(i),c=o(62125);const m=e=>{let{children:t,className:o="language-bash"}=e;const{siteConfig:i}=(0,a.Z)(),{versions:m}=(0,r.eZ)("docusaurus-plugin-content-docs");return s.createElement(n.Z,null,(()=>{const e=(0,c.p)(i,m),n="latest"===e?"":`--version ${(e=>{if(p().satisfies(e,">=2.0.3"))return e;const t=e.slice(0,3);return"v"+(parseFloat(t)-.7).toFixed(1)+e.slice(3)})(e)}`;return s.createElement(l.Z,{className:o},t.replace("--version latest",n).trim())}))}},62125:(e,t,o)=>{o.d(t,{Z:()=>p,p:()=>i});var n=o(8714),a=o(43205),r=o(73622),l=o(85881),s=o(59496);const i=(e,t)=>{const o=window.location.pathname;let n=window.localStorage.getItem("docs-preferred-version-default");if(o===e.baseUrl&&n)return"current"===n?"latest":n;if(o.includes("/docs/next"))return"latest";const a=t.find((e=>e.isLast)),r=t.find((e=>o.includes(e.name)));return r?r.name:a.name};const p=e=>{let{children:t,replaced:o="latest",isArchive:p=!1,className:c="language-bash"}=e;const{siteConfig:m}=(0,a.Z)(),{versions:d}=(0,r.eZ)("docusaurus-plugin-content-docs");return s.createElement(n.Z,null,(()=>{const e=i(m,d),n=p?t.replace(o,function(e){return"latest"===e?"refs/heads/master":`refs/tags/v${e}`}(e)):"latest"===e?t:t.replace(o,"v"+e);return s.createElement(l.Z,{className:c},n)}))}},46794:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var n=o(60795),a=(o(59496),o(49613)),r=o(68070);const l={title:"Extend Chaos Daemon Interface"},s=void 0,i={unversionedId:"extend-chaos-daemon-interface",id:"version-2.6.2/extend-chaos-daemon-interface",title:"Extend Chaos Daemon Interface",description:"In Add a new chaos experiment type, you have added HelloWorldChaos, which can print Hello world! in the logs of Chaos Controller Manager.",source:"@site/versioned_docs/version-2.6.2/extend-chaos-daemon-interface.md",sourceDirName:".",slug:"/extend-chaos-daemon-interface",permalink:"/docs/extend-chaos-daemon-interface",draft:!1,editUrl:"https://github.com/chaos-mesh/website/edit/master/versioned_docs/version-2.6.2/extend-chaos-daemon-interface.md",tags:[],version:"2.6.2",frontMatter:{title:"Extend Chaos Daemon Interface"},sidebar:"docs",previous:{title:"Add a New Chaos Experiment Type",permalink:"/docs/add-new-chaos-experiment-type"},next:{title:"Extend Chaosd",permalink:"/docs/extend-chaosd"}},p={},c=[{value:"Selector",id:"selector",level:2},{value:"Implement the gRPC interface",id:"implement-the-grpc-interface",level:2},{value:"Verify the output of HelloWorldChaos",id:"verify-the-output-of-helloworldchaos",level:2},{value:"Next steps",id:"next-steps",level:2}],m={toc:c},d="wrapper";function h(e){let{components:t,...o}=e;return(0,a.kt)(d,(0,n.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In ",(0,a.kt)("a",{parentName:"p",href:"/docs/add-new-chaos-experiment-type"},"Add a new chaos experiment type"),", you have added ",(0,a.kt)("inlineCode",{parentName:"p"},"HelloWorldChaos"),", which can print ",(0,a.kt)("inlineCode",{parentName:"p"},"Hello world!")," in the logs of Chaos Controller Manager."),(0,a.kt)("p",null,"To enable the ",(0,a.kt)("inlineCode",{parentName:"p"},"HelloWorldChaos")," to inject some faults into the target Pod, you need to extend Chaos Daemon interface."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"It's recommended to read ",(0,a.kt)("a",{parentName:"p",href:"/docs/#architecture-overview"},"the architecture of Chaos Mesh")," before you go forward.")),(0,a.kt)("p",null,"This document covers:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#selector"},"Selector")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#implement-the-grpc-interface"},"Implement the gRPC interface")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#verify-the-output-of-helloworldchaos"},"Verify the output of HelloWorldChaos")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#next-steps"},"Next steps"))),(0,a.kt)("h2",{id:"selector"},"Selector"),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"api/v1alpha1/helloworldchaos_type.go"),", you have defined ",(0,a.kt)("inlineCode",{parentName:"p"},"HelloWorldSpec"),", which includes ",(0,a.kt)("inlineCode",{parentName:"p"},"ContainerSelector"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// HelloWorldChaosSpec defines the desired state of HelloWorldChaos\ntype HelloWorldChaosSpec struct {\n        // ContainerSelector specifies the target for injection\n        ContainerSelector `json:",inline"`\n\n        // Duration represents the duration of the chaos\n        // +optional\n        Duration *string `json:"duration,omitempty"`\n\n        // RemoteCluster represents the remote cluster where the chaos will be deployed\n        // +optional\n        RemoteCluster string `json:"remoteCluster,omitempty"`\n}\n\n//...\n\n// GetSelectorSpecs is a getter for selectors\nfunc (obj *HelloWorldChaos) GetSelectorSpecs() map[string]interface{} {\n        return map[string]interface{}{\n                ".": &obj.Spec.ContainerSelector,\n        }\n}\n')),(0,a.kt)("p",null,"In Chaos Mesh, Selector is used to define the scope of a chaos experiment, the target namespace, the annotation, the label, etc."),(0,a.kt)("p",null,"Selector can also be some more specific values (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"AWSSelector")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"AWSChaos"),"). Normally each chaos experiment needs only one selector, with exceptions like ",(0,a.kt)("inlineCode",{parentName:"p"},"NetworkChaos")," because it sometimes needs two selectors as two objects for network partitioning."),(0,a.kt)("p",null,"You can refer to ",(0,a.kt)("a",{parentName:"p",href:"/docs/define-chaos-experiment-scope"},"Define the Scope of Chaos Experiments")," for more information about Selector."),(0,a.kt)("h2",{id:"implement-the-grpc-interface"},"Implement the gRPC interface"),(0,a.kt)("p",null,"To allow Chaos Daemon to accept the requests from Chaos Controller Manager, you need to implement a new gRPC interface."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Add the RPC in ",(0,a.kt)("inlineCode",{parentName:"p"},"pkg/chaosdaemon/pb/chaosdaemon.proto"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-proto"},"service ChaosDaemon {\n   ...\n\n   rpc ExecHelloWorldChaos(ExecHelloWorldRequest) returns (google.protobuf.Empty) {}\n}\n\nmessage ExecHelloWorldRequest {\n   string container_id = 1;\n}\n")),(0,a.kt)("p",{parentName:"li"},"Then you need to update the related ",(0,a.kt)("inlineCode",{parentName:"p"},"chaosdaemon.pb.go")," file by running the following command:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"make proto\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Implement gRPC services in Chaos Daemon."),(0,a.kt)("p",{parentName:"li"},"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"pkg/chaosdaemon")," directory, create a file named ",(0,a.kt)("inlineCode",{parentName:"p"},"helloworld_server.go")," with the following contents:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package chaosdaemon\n\nimport (\n        "context"\n\n        "github.com/golang/protobuf/ptypes/empty"\n\n        "github.com/chaos-mesh/chaos-mesh/pkg/bpm"\n        "github.com/chaos-mesh/chaos-mesh/pkg/chaosdaemon/pb"\n)\n\nfunc (s *DaemonServer) ExecHelloWorldChaos(ctx context.Context, req *pb.ExecHelloWorldRequest) (*empty.Empty, error) {\n        log := s.getLoggerFromContext(ctx)\n        log.Info("ExecHelloWorldChaos", "request", req)\n\n        pid, err := s.crClient.GetPidFromContainerID(ctx, req.ContainerId)\n        if err != nil {\n                return nil, err\n        }\n\n        cmd := bpm.DefaultProcessBuilder("sh", "-c", "ps aux").\n                SetContext(ctx).\n                SetNS(pid, bpm.MountNS).\n                Build(ctx)\n        out, err := cmd.Output()\n        if err != nil {\n                return nil, err\n        }\n        if len(out) != 0 {\n                log.Info("cmd output", "output", string(out))\n        }\n\n        return &empty.Empty{}, nil\n}\n')),(0,a.kt)("p",{parentName:"li"},"After ",(0,a.kt)("inlineCode",{parentName:"p"},"chaos-daemon")," receives the ",(0,a.kt)("inlineCode",{parentName:"p"},"ExecHelloWorldChaos")," request, you can see a list of processes in the current container.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Send a gRPC request when applying the chaos experiment."),(0,a.kt)("p",{parentName:"li"},"Every chaos experiment has a life cycle: ",(0,a.kt)("inlineCode",{parentName:"p"},"apply")," and then ",(0,a.kt)("inlineCode",{parentName:"p"},"recover"),". However, there are some chaos experiments that cannot be recovered by default (for example, PodKill in PodChaos and HelloWorldChaos). These are called OneShot experiments. You can find ",(0,a.kt)("inlineCode",{parentName:"p"},"+chaos-mesh:oneshot=true"),", which we have defined in the ",(0,a.kt)("inlineCode",{parentName:"p"},"HelloWorldChaos")," schema."),(0,a.kt)("p",{parentName:"li"},"The chaos controller manager needs to send a request to the chaos daemon when ",(0,a.kt)("inlineCode",{parentName:"p"},"HelloWorldChaos")," is in the ",(0,a.kt)("inlineCode",{parentName:"p"},"apply")," phase. This is done by updating ",(0,a.kt)("inlineCode",{parentName:"p"},"controllers/chaosimpl/helloworldchaos/types.go"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-go"},'func (impl *Impl) Apply(ctx context.Context, index int, records []*v1alpha1.Record, obj v1alpha1.InnerObject) (v1alpha1.Phase, error) {\n        impl.Log.Info("Apply helloworld chaos")\n\n        decodedContainer, err := impl.decoder.DecodeContainerRecord(ctx, records[index], obj)\n        if err != nil {\n                return v1alpha1.NotInjected, err\n        }\n\n        pbClient := decodedContainer.PbClient\n        containerId := decodedContainer.ContainerId\n\n        _, err = pbClient.ExecHelloWorldChaos(ctx, &pb.ExecHelloWorldRequest{\n                ContainerId: containerId,\n        })\n        if err != nil {\n                return v1alpha1.NotInjected, err\n        }\n\n        return v1alpha1.Injected, nil\n}\n\nfunc (impl *Impl) Recover(ctx context.Context, index int, records []*v1alpha1.Record, obj v1alpha1.InnerObject) (v1alpha1.Phase, error) {\n        impl.Log.Info("Recover helloworld chaos")\n        return v1alpha1.NotInjected, nil\n}\n')),(0,a.kt)("admonition",{parentName:"li",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"There is no need to recover ",(0,a.kt)("inlineCode",{parentName:"p"},"HelloWorldChaos")," because ",(0,a.kt)("inlineCode",{parentName:"p"},"HelloWorldChaos")," is a ",(0,a.kt)("strong",{parentName:"p"},"OneShot")," experiment. For the type of chaos experiment you develop, you can implement the logic of the recovery function as needed.")))),(0,a.kt)("h2",{id:"verify-the-output-of-helloworldchaos"},"Verify the output of HelloWorldChaos"),(0,a.kt)("p",null,"Now you can verify the output of ",(0,a.kt)("inlineCode",{parentName:"p"},"HelloWorldChaos"),":"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Build Docker images as we described in ",(0,a.kt)("a",{parentName:"p",href:"/docs/add-new-chaos-experiment-type#step-4-build-docker-images"},"Add a new chaos experiment type"),", then load them into your cluster."),(0,a.kt)("admonition",{parentName:"li",type:"note"},(0,a.kt)("p",{parentName:"admonition"},"If you're using minikube, some versions of minikube cannot overwrite the existing images with the same tag. You may delete the existing images before loading the new ones."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Update Chaos Mesh:"),(0,a.kt)(r.Z,{mdxType:"PickHelmVersion"},"helm upgrade chaos-mesh helm/chaos-mesh -n=chaos-mesh --set controllerManager.leaderElection.enabled=false,dashboard.securityMode=false")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Deploy a Pod for testing:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://raw.githubusercontent.com/chaos-mesh/apps/master/ping/busybox-statefulset.yaml\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Create a ",(0,a.kt)("inlineCode",{parentName:"p"},"hello-busybox.yaml")," file with the following content:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: chaos-mesh.org/v1alpha1\nkind: HelloWorldChaos\nmetadata:\n  name: hello-busybox\n  namespace: chaos-mesh\nspec:\n  selector:\n    namespaces:\n      - busybox\n  mode: all\n  duration: 1h\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Run:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f hello-busybox.yaml\n# helloworldchaos.chaos-mesh.org/hello-busybox created\n")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Now you can check if ",(0,a.kt)("inlineCode",{parentName:"p"},"chaos-controller-manager")," has ",(0,a.kt)("inlineCode",{parentName:"p"},"Apply helloworld chaos")," in its logs:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl logs -n chaos-mesh chaos-controller-manager-xxx\n")),(0,a.kt)("p",{parentName:"li"},"Example output:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-log"},'2023-07-16T08:20:46.823Z INFO records records/controller.go:149 apply chaos {"id": "busybox/busybox-0/busybox"}\n2023-07-16T08:20:46.823Z INFO helloworldchaos helloworldchaos/types.go:27 Apply helloworld chaos\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Check the logs of Chaos Daemon:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl logs -n chaos-mesh chaos-daemon-xxx\n")),(0,a.kt)("p",{parentName:"li"},"Example output:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-log"},'2023-07-16T08:20:46.833Z INFO chaos-daemon.daemon-server chaosdaemon/server.go:187 ExecHelloWorldChaos {"namespacedName": "chaos-mesh/hello-busybox", "request": "container_id:\\"docker://5e01e76efdec6aa0934afc15bb80e121d58b43c529a6696a01a242f7ac68f201\\""}\n2023-07-16T08:20:46.834Z INFO chaos-daemon.daemon-server.background-process-manager.process-builder pb/chaosdaemon.pb.go:4568 build command {"namespacedName": "chaos-mesh/hello-busybox", "command": "/usr/local/bin/nsexec -m /proc/104710/ns/mnt -- sh -c ps aux"}\n2023-07-16T08:20:46.841Z INFO chaos-daemon.daemon-server chaosdaemon/server.go:187 cmd output {"namespacedName": "chaos-mesh/hello-busybox", "output": "PID   USER     TIME  COMMAND\\n    1 root      0:00 sh -c echo Container is Running ; sleep 3600\\n"}\n2023-07-16T08:20:46.856Z INFO chaos-daemon.daemon-server chaosdaemon/server.go:187 ExecHelloWorldChaos {"namespacedName": "chaos-mesh/hello-busybox", "request": "container_id:\\"docker://bab4f632a0358529f7d72d35e014b8c2ce57438102d99d6174dd9df52d093e99\\""}\n2023-07-16T08:20:46.864Z INFO chaos-daemon.daemon-server.background-process-manager.process-builder pb/chaosdaemon.pb.go:4568 build command {"namespacedName": "chaos-mesh/hello-busybox", "command": "/usr/local/bin/nsexec -m /proc/104841/ns/mnt -- sh -c ps aux"}\n2023-07-16T08:20:46.867Z INFO chaos-daemon.daemon-server chaosdaemon/server.go:187 cmd output {"namespacedName": "chaos-mesh/hello-busybox", "output": "PID   USER     TIME  COMMAND\\n    1 root      0:00 sh -c echo Container is Running ; sleep 3600\\n"}\n')))),(0,a.kt)("p",{parentName:"li"},"You will see two separate lines of ",(0,a.kt)("inlineCode",{parentName:"p"},"ps aux"),", which are corresponding to two different Pods."))),(0,a.kt)("h2",{id:"next-steps"},"Next steps"),(0,a.kt)("p",null,"If you encounter any problems during the process, create an ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/chaos-mesh/chaos-mesh/issues"},"issue")," in the Chaos Mesh repository."),(0,a.kt)("p",null,"If you are curious about how all this works, you can read the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/chaos-mesh/chaos-mesh/blob/master/controllers/README.md"},"controllers/README.md")," and code for different controllers next."),(0,a.kt)("p",null,"You are now ready to become a Chaos Mesh developer! Feel free to visit the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/chaos-mesh/chaos-mesh/issues"},"Chaos Mesh issues")," to find a ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/chaos-mesh/chaos-mesh/labels/good%20first%20issue"},"good first issue")," and get started!"))}h.isMDXComponent=!0}}]);