"use strict";(self.webpackChunkchaos_mesh_website=self.webpackChunkchaos_mesh_website||[]).push([[38186],{3905:(e,t,s)=>{s.d(t,{Zo:()=>u,kt:()=>d});var a=s(67294);function r(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function n(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,a)}return s}function o(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?n(Object(s),!0).forEach((function(t){r(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):n(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function i(e,t){if(null==e)return{};var s,a,r=function(e,t){if(null==e)return{};var s,a,r={},n=Object.keys(e);for(a=0;a<n.length;a++)s=n[a],t.indexOf(s)>=0||(r[s]=e[s]);return r}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)s=n[a],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(r[s]=e[s])}return r}var l=a.createContext({}),m=function(e){var t=a.useContext(l),s=t;return e&&(s="function"==typeof e?e(t):o(o({},t),e)),s},u=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var s=e.components,r=e.mdxType,n=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=m(s),d=r,f=p["".concat(l,".").concat(d)]||p[d]||c[d]||n;return s?a.createElement(f,o(o({ref:t},u),{},{components:s})):a.createElement(f,o({ref:t},u))}));function d(e,t){var s=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var n=s.length,o=new Array(n);o[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var m=2;m<n;m++)o[m]=s[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,s)}p.displayName="MDXCreateElement"},24633:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>n,metadata:()=>i,toc:()=>m});var a=s(87462),r=(s(67294),s(3905));const n={title:"Simulate Stress Scenarios"},o=void 0,i={unversionedId:"simulate-heavy-stress-in-physical-nodes",id:"version-2.0.7/simulate-heavy-stress-in-physical-nodes",title:"Simulate Stress Scenarios",description:"This document describes how to use Chaosd to simulate stress scenarios. This feature generates CPU or memory stress on the host using stress-ng. You can create stress experiments either in command-line or service mode.",source:"@site/versioned_docs/version-2.0.7/simulate-heavy-stress-in-physical-nodes.md",sourceDirName:".",slug:"/simulate-heavy-stress-in-physical-nodes",permalink:"/docs/2.0.7/simulate-heavy-stress-in-physical-nodes",draft:!1,editUrl:"https://github.com/chaos-mesh/website/edit/master/versioned_docs/version-2.0.7/simulate-heavy-stress-in-physical-nodes.md",tags:[],version:"2.0.7",frontMatter:{title:"Simulate Stress Scenarios"},sidebar:"version-2.0.7/docs",previous:{title:"Simulate Host Faults",permalink:"/docs/2.0.7/simulate-host-console-in-physical-nodes"},next:{title:"Integrate Chaos Mesh to GitHub Actions",permalink:"/docs/2.0.7/integrate-chaos-mesh-into-github-actions"}},l={},m=[{value:"Create stress experiments in command-line mode",id:"create-stress-experiments-in-command-line-mode",level:2},{value:"Simulating CPU stress",id:"simulating-cpu-stress",level:3},{value:"Command of simulating CPU stress",id:"command-of-simulating-cpu-stress",level:4},{value:"Configuration description of simulating CPU stress",id:"configuration-description-of-simulating-cpu-stress",level:4},{value:"Example of simulating CPU stress",id:"example-of-simulating-cpu-stress",level:4},{value:"Simulating memory stress",id:"simulating-memory-stress",level:3},{value:"Command of simulating memory stress",id:"command-of-simulating-memory-stress",level:4},{value:"Configuration description of simulating memory stress",id:"configuration-description-of-simulating-memory-stress",level:4},{value:"Example of simulating memory stress",id:"example-of-simulating-memory-stress",level:4},{value:"Create stress experiments in service mode",id:"create-stress-experiments-in-service-mode",level:2}],u={toc:m};function c(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This document describes how to use Chaosd to simulate stress scenarios. This feature generates CPU or memory stress on the host using ",(0,r.kt)("a",{parentName:"p",href:"https://wiki.ubuntu.com/Kernel/Reference/stress-ng"},"stress-ng"),". You can create stress experiments either in command-line or service mode."),(0,r.kt)("h2",{id:"create-stress-experiments-in-command-line-mode"},"Create stress experiments in command-line mode"),(0,r.kt)("p",null,"This section describes how to create stress experiments in command-line mode."),(0,r.kt)("p",null,"Before creating stress experiments, you can run the following command to view the stress experiment types supported by Chaosd:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"chaosd attack stress --help\n")),(0,r.kt)("p",null,"The result is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Stress attack related commands\n\nUsage:\n  chaosd attack stress [command]\n\nAvailable Commands:\n  cpu         continuously stress CPU out\n  mem         continuously stress virtual memory out\n\nFlags:\n  -h, --help   help for stress\n\nGlobal Flags:\n      --log-level string   the log level of chaosd, the value can be 'debug', 'info', 'warn' and 'error'\n\nUse \"chaosd attack stress [command] --help\" for more information about a command.\n")),(0,r.kt)("p",null,"Currently, Chaosd supports creating CPU stress experiments and memory stress experiments."),(0,r.kt)("h3",{id:"simulating-cpu-stress"},"Simulating CPU stress"),(0,r.kt)("h4",{id:"command-of-simulating-cpu-stress"},"Command of simulating CPU stress"),(0,r.kt)("p",null,"To view the configuration items supported by the CPU stress simulation, run the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"chaosd attack stress cpu --help\n")),(0,r.kt)("p",null,"The result is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"continuously stress CPU out\n\nUsage:\n  chaosd attack stress cpu [options] [flags]\n\nFlags:\n  -h, --help              help for cpu\n  -l, --load int          Load specifies P percent loading per CPU worker. 0 is effectively a sleep (no load) and 100 is full loading. (default 10)\n  -o, --options strings   extend stress-ng options.\n  -w, --workers int       Workers specifies N workers to apply the stressor. (default 1)\n\nGlobal Flags:\n      --log-level string   the log level of chaosd, the value can be 'debug', 'info', 'warn' and 'error'\n")),(0,r.kt)("h4",{id:"configuration-description-of-simulating-cpu-stress"},"Configuration description of simulating CPU stress"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Configuration item"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Abbreviation"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"load"),(0,r.kt)("td",{parentName:"tr",align:"left"},"l"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Specifies the percentage of CPU load per CPU worker. 0 means no CPU load, and 100 means full CPU load."),(0,r.kt)("td",{parentName:"tr",align:"left"},"int; range: 0 to 100; default value: 10.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"workers"),(0,r.kt)("td",{parentName:"tr",align:"left"},"w"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Specifies the number of workers used to create CPU stress."),(0,r.kt)("td",{parentName:"tr",align:"left"},"int; default value: 1.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"options"),(0,r.kt)("td",{parentName:"tr",align:"left"},"o"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The extended parameter of stress-ng, usually not configured."),(0,r.kt)("td",{parentName:"tr",align:"left"},'string; default value: "".')))),(0,r.kt)("h4",{id:"example-of-simulating-cpu-stress"},"Example of simulating CPU stress"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"chaosd attack stress cpu --workers 2 --load 10\n")),(0,r.kt)("p",null,"The result is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'[2021/05/12 03:38:33.698 +00:00] [INFO] [stress.go:66] ["stressors normalize"] [arguments=" --cpu 2 --cpu-load 10"]\n[2021/05/12 03:38:33.702 +00:00] [INFO] [stress.go:82] ["Start stress-ng process successfully"] [command="/usr/bin/stress-ng --cpu 2 --cpu-load 10"] [Pid=27483]\nAttack stress cpu successfully, uid: 4f33b2d4-aee6-43ca-9c43-0f12867e5c9c\n')),(0,r.kt)("h3",{id:"simulating-memory-stress"},"Simulating memory stress"),(0,r.kt)("h4",{id:"command-of-simulating-memory-stress"},"Command of simulating memory stress"),(0,r.kt)("p",null,"To view the configuration items supported by the memory stress simulation, run the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"chaosd attack stress mem --help\n")),(0,r.kt)("p",null,"The result is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"continuously stress virtual memory out\n\nUsage:\n  chaosd attack stress mem [options] [flags]\n\nFlags:\n  -h, --help              help for mem\n  -o, --options strings   extend stress-ng options.\n  -s, --size string       Size specifies N bytes consumed per vm worker, default is the total available memory. One can specify the size as % of total available memory or in units of B, KB/KiB, MB/MiB, GB/GiB, TB/TiB..\n  -w, --workers int       Workers specifies N workers to apply the stressor. (default 1)\n\nGlobal Flags:\n      --log-level string   the log level of chaosd, the value can be 'debug', 'info', 'warn' and 'error'\n")),(0,r.kt)("h4",{id:"configuration-description-of-simulating-memory-stress"},"Configuration description of simulating memory stress"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Configuration item"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Abbreviation"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"size"),(0,r.kt)("td",{parentName:"tr",align:"left"},"s"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Specifies the size of memory per VM worker."),(0,r.kt)("td",{parentName:"tr",align:"left"},"the memory size in B, KB/KiB, MB/MiB, GB/GiB, TB/TiB. If the size is not set, all available memory is used by default.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"workers"),(0,r.kt)("td",{parentName:"tr",align:"left"},"w"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Specify the number of workers used to create memory stress."),(0,r.kt)("td",{parentName:"tr",align:"left"},"int; default value: 1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"options"),(0,r.kt)("td",{parentName:"tr",align:"left"},"o"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The extended parameter of stress-ng, usually not configured."),(0,r.kt)("td",{parentName:"tr",align:"left"},'string; default value: "".')))),(0,r.kt)("h4",{id:"example-of-simulating-memory-stress"},"Example of simulating memory stress"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"chaosd attack stress mem --workers 2 --size 100M\n")),(0,r.kt)("p",null,"The result is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'[2021/05/12 03:37:19.643 +00:00] [INFO] [stress.go:66] ["stressors normalize"] [arguments=" --vm 2 --vm-keep --vm-bytes 100000000"]\n[2021/05/12 03:37:19.654 +00:00] [INFO] [stress.go:82] ["Start stress-ng process successfully"] [command="/usr/bin/stress-ng --vm 2 --vm-keep --vm-bytes 100000000"] [Pid=26799]\nAttack stress mem successfully, uid: c2bff2f5-3aac-4ace-b7a6-322946ae6f13\n')),(0,r.kt)("p",null,"When running the experiment, you need to save the uid information of the experiment. When a stress simulation is not needed, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"recover")," to terminate the uid-related experiment::"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"chaosd recover c2bff2f5-3aac-4ace-b7a6-322946ae6f13\n")),(0,r.kt)("p",null,"The result is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Recover c2bff2f5-3aac-4ace-b7a6-322946ae6f13 successfully\n")),(0,r.kt)("h2",{id:"create-stress-experiments-in-service-mode"},"Create stress experiments in service mode"),(0,r.kt)("p",null,"(To be added)"))}c.isMDXComponent=!0}}]);