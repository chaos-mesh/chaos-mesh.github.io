"use strict";(self.webpackChunkchaos_mesh_website=self.webpackChunkchaos_mesh_website||[]).push([[2706],{89400:function(e,t,a){var o=a(91262),n=a(73148),l=a(67294),r=a(56871);t.Z=function(e){var t=e.children,a=e.className,s=function(e){var t=e.children;return l.createElement("div",{style:{marginBottom:"1.25rem"}},l.createElement(n.Z,{className:a},t))};return l.createElement(o.Z,{fallback:l.createElement(s,null,t)},(function(){var e=(0,r.p)(),a="latest"===e?"":"--version v"+function(e){if("2"===e[0])return e;var t=e.slice(0,3);return(parseFloat(t)-.7).toString()+e.slice(3)}(e);return l.createElement(s,null,t.replace("--version latest",a).trim())}))}},56871:function(e,t,a){a.d(t,{p:function(){return c}});var o=a(91262),n=a(73148),l=a(67294),r=a(52263),s=a(28084),c=function(){var e=(0,r.Z)().siteConfig,t=window.location.pathname,a=window.localStorage.getItem("docs-preferred-version-default");if(t===e.baseUrl&&a)return"current"===a?"latest":a;if(t.includes("/docs/next"))return"latest";var o=(0,s.usePluginData)("docusaurus-plugin-content-docs").versions,n=o.filter((function(e){return e.isLast}))[0].name;return o.filter((function(e){return t.includes(e.name)})).map((function(e){return e.name}))[0]||n};t.Z=function(e){var t=e.children,a=e.className,r=function(e){var t=e.children;return l.createElement("div",{style:{marginBottom:"1.25rem"}},l.createElement(n.Z,{className:a},t))};return l.createElement(o.Z,{fallback:l.createElement(r,null,t)},(function(){var e=c(),a="latest"===e?t:t.replace("latest","v"+e);return l.createElement(r,null,a)}))}},73148:function(e,t,a){a.d(t,{Z:function(){return C}});var o=a(87462),n=a(67294),l=a(86010),r=a(24544),s=a(10195),c=a(87594),i=a.n(c),h=a(83583),m=a(24973),p="codeBlockContainer_2gih",d="codeBlockContent_3z4W",u="codeBlockTitle_1Kb7",g="codeBlock_6upA",k="codeBlockWithTitle_xy-i",b="copyButton_2e3i",f="codeBlockLines_xlV7",y=a(941),N=/{([\d,-]+)}/,v=function(e){void 0===e&&(e=["js","jsBlock","jsx","python","html"]);var t={js:{start:"\\/\\/",end:""},jsBlock:{start:"\\/\\*",end:"\\*\\/"},jsx:{start:"\\{\\s*\\/\\*",end:"\\*\\/\\s*\\}"},python:{start:"#",end:""},html:{start:"\x3c!--",end:"--\x3e"}},a=["highlight-next-line","highlight-start","highlight-end"].join("|"),o=e.map((function(e){return"(?:"+t[e].start+"\\s*("+a+")\\s*"+t[e].end+")"})).join("|");return new RegExp("^\\s*(?:"+o+")\\s*$")};function C(e){var t=e.children,a=e.className,c=e.metastring,C=e.title,w=(0,y.LU)().prism,_=(0,n.useState)(!1),j=_[0],W=_[1],H=(0,n.useState)(!1),x=H[0],E=H[1];(0,n.useEffect)((function(){E(!0)}),[]);var R=(0,y.bc)(c)||C,M=(0,n.useRef)(null),D=[],A=(0,h.Z)(),T=Array.isArray(t)?t.join(""):t;if(c&&N.test(c)){var Z=c.match(N)[1];D=i()(Z).filter((function(e){return e>0}))}var B=a&&a.replace(/language-/,"");!B&&w.defaultLanguage&&(B=w.defaultLanguage);var L=T.replace(/\n$/,"");if(0===D.length&&void 0!==B){for(var I,S="",q=function(e){switch(e){case"js":case"javascript":case"ts":case"typescript":return v(["js","jsBlock"]);case"jsx":case"tsx":return v(["js","jsBlock","jsx"]);case"html":return v(["js","jsBlock","html"]);case"python":case"py":return v(["python"]);default:return v()}}(B),P=T.replace(/\n$/,"").split("\n"),G=0;G<P.length;){var Y=G+1,K=P[G].match(q);if(null!==K){switch(K.slice(1).reduce((function(e,t){return e||t}),void 0)){case"highlight-next-line":S+=Y+",";break;case"highlight-start":I=Y;break;case"highlight-end":S+=I+"-"+(Y-1)+","}P.splice(G,1)}else G+=1}D=i()(S),L=P.join("\n")}var V=function(){(0,s.Z)(L),W(!0),setTimeout((function(){return W(!1)}),2e3)};return n.createElement(r.ZP,(0,o.Z)({},r.lG,{key:String(x),theme:A,code:L,language:B}),(function(e){var t,a=e.className,r=e.style,s=e.tokens,c=e.getLineProps,i=e.getTokenProps;return n.createElement("div",{className:p},R&&n.createElement("div",{style:r,className:u},R),n.createElement("div",{className:(0,l.Z)(d,B)},n.createElement("div",{tabIndex:0,className:(0,l.Z)(a,g,"thin-scrollbar",(t={},t[k]=R,t))},n.createElement("div",{className:f,style:r},s.map((function(e,t){1===e.length&&""===e[0].content&&(e[0].content="\n");var a=c({line:e,key:t});return D.includes(t+1)&&(a.className=a.className+" docusaurus-highlight-code-line"),n.createElement("div",(0,o.Z)({key:t},a),e.map((function(e,t){return n.createElement("span",(0,o.Z)({key:t},i({token:e,key:t})))})))})))),n.createElement("button",{ref:M,type:"button","aria-label":(0,m.I)({id:"theme.CodeBlock.copyButtonAriaLabel",message:"Copy code to clipboard",description:"The ARIA label for copy code blocks button"}),className:(0,l.Z)(b),onClick:V},j?n.createElement(m.Z,{id:"theme.CodeBlock.copied",description:"The copied button label on code blocks"},"Copied"):n.createElement(m.Z,{id:"theme.CodeBlock.copy",description:"The copy button label on code blocks"},"Copy"))))}))}},5560:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return c},contentTitle:function(){return i},metadata:function(){return h},toc:function(){return m},default:function(){return d}});var o=a(87462),n=a(63366),l=(a(67294),a(3905)),r=a(89400),s=["components"],c={id:"develop_a_new_chaos",title:"Develop a New Chaos",sidebar_label:"Develop a New Chaos"},i=void 0,h={unversionedId:"development_guides/develop_a_new_chaos",id:"version-0.9.1/development_guides/develop_a_new_chaos",isDocsHomePage:!1,title:"Develop a New Chaos",description:'After preparing the development environment, let\'s develop a new type of chaos, HelloWorldChaos, which only prints a "Hello World!" message to the log. Generally, to add a new chaos type for Chaos Mesh, you need to take the following steps:',source:"@site/versioned_docs/version-0.9.1/development_guides/dev_hello_world.md",sourceDirName:"development_guides",slug:"/development_guides/develop_a_new_chaos",permalink:"/docs/0.9.1/development_guides/develop_a_new_chaos",editUrl:"https://github.com/chaos-mesh/website/edit/master/versioned_docs/version-0.9.1/development_guides/dev_hello_world.md",tags:[],version:"0.9.1",frontMatter:{id:"develop_a_new_chaos",title:"Develop a New Chaos",sidebar_label:"Develop a New Chaos"},sidebar:"version-0.9.1/docs",previous:{title:"Set up the development environment",permalink:"/docs/0.9.1/development_guides/set_up_the_development_environment"},next:{title:"FAQs",permalink:"/docs/0.9.1/faqs"}},m=[{value:"Add the chaos object in controller",id:"add-the-chaos-object-in-controller",children:[]},{value:"Register the CRD",id:"register-the-crd",children:[]},{value:"Implement the schema type",id:"implement-the-schema-type",children:[]},{value:"Make the Docker image",id:"make-the-docker-image",children:[]},{value:"Run chaos",id:"run-chaos",children:[]},{value:"Next steps",id:"next-steps",children:[]}],p={toc:m};function d(e){var t=e.components,a=(0,n.Z)(e,s);return(0,l.kt)("wrapper",(0,o.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"After ",(0,l.kt)("a",{parentName:"p",href:"/docs/0.9.1/development_guides/set_up_the_development_environment"},"preparing the development environment"),', let\'s develop a new type of chaos, HelloWorldChaos, which only prints a "Hello World!" message to the log. Generally, to add a new chaos type for Chaos Mesh, you need to take the following steps:'),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#add-the-chaos-object-in-controller"},"Add the chaos object in controller")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#register-the-crd"},"Register the CRD")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#implement-the-schema-type"},"Implement the schema type")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#make-the-docker-image"},"Make the Docker image")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#run-chaos"},"Run chaos")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#next-steps"},"Next steps"))),(0,l.kt)("h2",{id:"add-the-chaos-object-in-controller"},"Add the chaos object in controller"),(0,l.kt)("p",null,"In Chaos Mesh, all chaos types are managed by the controller manager. To add a new chaos type, you need to start from adding the corresponding reconciler type in the controller, as instructed in the following steps:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Add the HelloWorldChaos object in the controller manager ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/chaos-mesh/chaos-mesh/blob/master/cmd/controller-manager/main.go#L104"},"main.go"),"."),(0,l.kt)("p",{parentName:"li"},"You will notice existing chaos types such as PodChaos, NetworkChaos and IOChaos. Add the new type below them:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-go"},'    if err = (&controllers.HelloWorldChaosReconciler{\n        Client: mgr.GetClient(),\n        Log:    ctrl.Log.WithName("controllers").WithName("HelloWorldChaos"),\n    }).SetupWithManager(mgr); err != nil {\n        setupLog.Error(err, "unable to create controller", "controller", "HelloWorldChaos")\n        os.Exit(1)\n    }\n'))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Under ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/chaos-mesh/chaos-mesh/tree/master/controllers"},"controllers"),", create a ",(0,l.kt)("inlineCode",{parentName:"p"},"helloworldchaos_controller.go")," file and edit it as below:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-go"},'package controllers\n\nimport (\n  "github.com/go-logr/logr"\n\n  chaosmeshv1alpha1 "github.com/chaos-mesh/chaos-mesh/api/v1alpha1"\n\n  ctrl "sigs.k8s.io/controller-runtime"\n  "sigs.k8s.io/controller-runtime/pkg/client"\n)\n\n// HelloWorldChaosReconciler reconciles a HelloWorldChaos object\ntype HelloWorldChaosReconciler struct {\n  client.Client\n  Log logr.Logger\n}\n\n// +kubebuilder:rbac:groups=chaos-mesh.org,resources=helloworldchaos,verbs=get;list;watch;create;update;patch;delete\n// +kubebuilder:rbac:groups=chaos-mesh.org,resources=helloworldchaos/status,verbs=get;update;patch\n\nfunc (r *HelloWorldChaosReconciler) Reconcile(req ctrl.Request) (ctrl.Result, error) {\n  logger := r.Log.WithValues("reconciler", "helloworldchaos")\n\n  // the main logic of `HelloWorldChaos`, it prints a log `Hello World!` and returns nothing.\n  logger.Info("Hello World!")\n\n  return ctrl.Result{}, nil\n}\n\nfunc (r *HelloWorldChaosReconciler) SetupWithManager(mgr ctrl.Manager) error {\n// exports `HelloWorldChaos` object, which represents the yaml schema content the user applies.\nreturn ctrl.NewControllerManagedBy(mgr).\n  For(&chaosmeshv1alpha1.HelloWorldChaos{}).\n  Complete(r)\n}\n')))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Note:")),(0,l.kt)("p",{parentName:"blockquote"},"The comment ",(0,l.kt)("inlineCode",{parentName:"p"},"// +kubebuilder:rbac:groups=chaos-mesh.org...")," is an authority control mechanism that decides which account can access this reconciler. To make it accessible by the dashboard and chaos-controller-manager, you need to modify ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/chaos-mesh/chaos-mesh/blob/master/helm/chaos-mesh/templates/controller-manager-rbac.yaml"},"controller-manager-rbac.yaml")," accordingly:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"- apiGroups: ['chaos-mesh.org']\n  resources:\n    - podchaos\n    - networkchaos\n    - iochaos\n    - helloworldchaos # Add this line in all chaos-mesh.org group\n  verbs: ['*']\n")),(0,l.kt)("h2",{id:"register-the-crd"},"Register the CRD"),(0,l.kt)("p",null,"The HelloWorldChaos object is a custom resource object in Kubernetes. This means you need to register the corresponding CRD in the Kubernetes API. To do this, modify ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/chaos-mesh/chaos-mesh/blob/master/config/crd/kustomization.yaml"},"kustomization.yaml")," by adding the corresponding line as shown below:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"resources:\n  - bases/chaos-mesh.org_podchaos.yaml\n  - bases/chaos-mesh.org_networkchaos.yaml\n  - bases/chaos-mesh.org_iochaos.yaml\n  - bases/chaos-mesh.org_helloworldchaos.yaml # this is the new line\n")),(0,l.kt)("h2",{id:"implement-the-schema-type"},"Implement the schema type"),(0,l.kt)("p",null,"To implement the schema type for the new chaos object, add ",(0,l.kt)("inlineCode",{parentName:"p"},"helloworldchaos_types.go")," in the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/chaos-mesh/chaos-mesh/tree/master/api/v1alpha1"},"api directory")," and modify it as below:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},'package v1alpha1\n\nimport (\n    metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"\n)\n\n// +kubebuilder:object:root=true\n\n// HelloWorldChaos is the Schema for the helloworldchaos API\ntype HelloWorldChaos struct {\n    metav1.TypeMeta   `json:",inline"`\n    metav1.ObjectMeta `json:"metadata,omitempty"`\n}\n\n// +kubebuilder:object:root=true\n\n// HelloWorldChaosList contains a list of HelloWorldChaos\ntype HelloWorldChaosList struct {\n    metav1.TypeMeta `json:",inline"`\n    metav1.ListMeta `json:"metadata,omitempty"`\n    Items           []HelloWorldChaos `json:"items"`\n}\n\nfunc init() {\n    SchemeBuilder.Register(&HelloWorldChaos{}, &HelloWorldChaosList{})\n}\n')),(0,l.kt)("p",null,"With this file added, the HelloWorldChaos schema type is defined and can be called by the following YAML lines:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: chaos-mesh.org/v1alpha1\nkind: HelloWorldChaos\nmetadata:\n  name: <name-of-this-resource>\n  namespace: <ns-of-this-resource>\n")),(0,l.kt)("h2",{id:"make-the-docker-image"},"Make the Docker image"),(0,l.kt)("p",null,"Having the object successfully added, you can make a Docker image and push it to your registry:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"make\nmake docker-push\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Note:")),(0,l.kt)("p",{parentName:"blockquote"},"The default ",(0,l.kt)("inlineCode",{parentName:"p"},"DOCKER_REGISTRY")," is ",(0,l.kt)("inlineCode",{parentName:"p"},"localhost:5000"),", which is preset in ",(0,l.kt)("inlineCode",{parentName:"p"},"hack/kind-cluster-build.sh"),". You can overwrite it to any registry to which you have access permission.")),(0,l.kt)("h2",{id:"run-chaos"},"Run chaos"),(0,l.kt)("p",null,"You are almost there. In this step, you will pull the image and apply it for testing."),(0,l.kt)("p",null,"Before you pull any image for Chaos Mesh (using ",(0,l.kt)("inlineCode",{parentName:"p"},"helm install")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"helm upgrade"),"), modify ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/chaos-mesh/chaos-mesh/blob/master/helm/chaos-mesh/values.yaml"},"values.yaml")," of helm template to replace the default image with what you just pushed to your local registry."),(0,l.kt)("p",null,"In this case, the template uses ",(0,l.kt)("inlineCode",{parentName:"p"},"pingcap/chaos-mesh:latest")," as the default target registry, so you need to replace it with ",(0,l.kt)("inlineCode",{parentName:"p"},"localhost:5000"),", as shown below:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"clusterScoped: true\n\n# Also see clusterScoped and controllerManager.serviceAccount\nrbac:\n  create: true\n\ncontrollerManager:\n  serviceAccount: chaos-controller-manager\n  ...\n  image: localhost:5000/pingcap/chaos-mesh:latest\n  ...\nchaosDaemon:\n  image: localhost:5000/pingcap/chaos-daemon:latest\n  ...\ndashboard:\n  image: localhost:5000/pingcap/chaos-dashboard:latest\n  ...\n")),(0,l.kt)("p",null,"Now take the following steps to run chaos:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Get the related custom resource type for Chaos Mesh:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f manifests/\nkubectl get crd podchaos.chaos-mesh.org\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Install Chaos Mesh:"),(0,l.kt)(r.Z,{className:"language-bash",mdxType:"PickHelmVersion"},"helm install helm/chaos-mesh --name=chaos-mesh --namespace=chaos-testing --set chaosDaemon.runtime=containerd --set chaosDaemon.socketPath=/run/containerd/containerd.sock --version latest kubectl get pods --namespace chaos-testing -l app.kubernetes.io/instance=chaos-mesh"),(0,l.kt)("p",{parentName:"li"},"The arguments ",(0,l.kt)("inlineCode",{parentName:"p"},"--set chaosDaemon.runtime=containerd --set chaosDaemon.socketPath=/run/containerd/containerd.sock")," is used to to support network chaos on kind.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Create ",(0,l.kt)("inlineCode",{parentName:"p"},"chaos.yaml")," in any location with the lines below:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: chaos-mesh.org/v1alpha1\nkind: HelloWorldChaos\nmetadata:\n  name: hello-world\n  namespace: chaos-testing\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Apply the chaos:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f /path/to/chaos.yaml\nkubectl get HelloWorldChaos -n chaos-testing\n")),(0,l.kt)("p",{parentName:"li"},"Now you should be able to check the ",(0,l.kt)("inlineCode",{parentName:"p"},"Hello World!")," result in the log:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl logs chaos-controller-manager-{pod-post-fix} -n chaos-testing\n")),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"Note:")),(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("inlineCode",{parentName:"p"},"{pod-post-fix}")," is a random string generated by Kubernetes, you can check it by executing ",(0,l.kt)("inlineCode",{parentName:"p"},"kubectl get po -n chaos-testing"),".")))),(0,l.kt)("h2",{id:"next-steps"},"Next steps"),(0,l.kt)("p",null,"Congratulations! You have just added a chaos type for Chaos Mesh successfully. Let us know if you run into any issues during the process. If you feel like doing other types of contributions, refer to Add facilities to chaos daemon (WIP)."))}d.isMDXComponent=!0}}]);