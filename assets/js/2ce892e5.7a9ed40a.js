"use strict";(self.webpackChunkchaos_mesh_website=self.webpackChunkchaos_mesh_website||[]).push([[868],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return c}});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var d=n.createContext({}),s=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=s(a),c=i,f=u["".concat(d,".").concat(c)]||u[c]||m[c]||r;return a?n.createElement(f,l(l({ref:t},p),{},{components:a})):n.createElement(f,l({ref:t},p))}));function c(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=u;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},91289:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return d},metadata:function(){return s},toc:function(){return p},default:function(){return u}});var n=a(87462),i=a(63366),r=(a(67294),a(3905)),l=["components"],o={title:"Simulate Disk Faults"},d=void 0,s={unversionedId:"simulate-disk-pressure-in-physical-nodes",id:"version-2.0.7/simulate-disk-pressure-in-physical-nodes",isDocsHomePage:!1,title:"Simulate Disk Faults",description:"This document describes how to use Chaosd to simulate disk faults. This feature helps you simulate disk read/write load (via dd) or disk fill (via dd or fallocate).",source:"@site/versioned_docs/version-2.0.7/simulate-disk-pressure-in-physical-nodes.md",sourceDirName:".",slug:"/simulate-disk-pressure-in-physical-nodes",permalink:"/docs/2.0.7/simulate-disk-pressure-in-physical-nodes",editUrl:"https://github.com/chaos-mesh/website/edit/master/versioned_docs/version-2.0.7/simulate-disk-pressure-in-physical-nodes.md",tags:[],version:"2.0.7",frontMatter:{title:"Simulate Disk Faults"}},p=[{value:"Create experiments using the command-line mode",id:"create-experiments-using-the-command-line-mode",children:[{value:"Simulate disk read load using the command-line mode",id:"simulate-disk-read-load-using-the-command-line-mode",children:[{value:"Commands for simulating disk read load",id:"commands-for-simulating-disk-read-load",children:[],level:4},{value:"Configuration description for simulating disk read load",id:"configuration-description-for-simulating-disk-read-load",children:[],level:4},{value:"Example for simulating disk read load",id:"example-for-simulating-disk-read-load",children:[],level:4}],level:3},{value:"Simulate disk write load using the command-line mode",id:"simulate-disk-write-load-using-the-command-line-mode",children:[{value:"Command for simulating disk write load",id:"command-for-simulating-disk-write-load",children:[],level:4},{value:"Configuration description for simulating disk write load",id:"configuration-description-for-simulating-disk-write-load",children:[],level:4},{value:"Example for simulating disk write load",id:"example-for-simulating-disk-write-load",children:[],level:4}],level:3},{value:"Simulate disk fill using the command-line mode",id:"simulate-disk-fill-using-the-command-line-mode",children:[{value:"Command for simulating disk fill",id:"command-for-simulating-disk-fill",children:[],level:4},{value:"Configuration description for simulating disk fill",id:"configuration-description-for-simulating-disk-fill",children:[],level:4},{value:"Example for simulating disk fill",id:"example-for-simulating-disk-fill",children:[],level:4}],level:3}],level:2}],m={toc:p};function u(e){var t=e.components,a=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This document describes how to use Chaosd to simulate disk faults. This feature helps you simulate disk read/write load (via ",(0,r.kt)("a",{parentName:"p",href:"https://man7.org/linux/man-pages/man1/dd.1.html"},"dd"),") or disk fill (via ",(0,r.kt)("a",{parentName:"p",href:"https://man7.org/linux/man-pages/man1/dd.1.html"},"dd")," or ",(0,r.kt)("a",{parentName:"p",href:"https://man7.org/linux/man-pages/man1/fallocate.1.html"},"fallocate"),")."),(0,r.kt)("h2",{id:"create-experiments-using-the-command-line-mode"},"Create experiments using the command-line mode"),(0,r.kt)("p",null,"This section describes how to create disk fault experiments using the command-line mode."),(0,r.kt)("p",null,"Before creating an experiment, you can run the following command to check the types of disk faults that are supported by Chaosd:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"chaosd attack disk -h\n")),(0,r.kt)("p",null,"The result is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"disk attack related command\n\nUsage:\n  chaosd attack disk [command]\n\nAvailable Commands:\n  add-payload add disk payload\n  fill        fill disk\n\nFlags:\n  -h, --help   help for disk\n\nGlobal Flags:\n      --log-level string   the log level of chaosd, the value can be 'debug', 'info', 'warn' and 'error'\n\nUse \"chaosd attack disk [command] --help\" for more information about a command.\n")),(0,r.kt)("p",null,"Currently, Chaosd supports creating disk read load experiments, disk write load experiments, and disk fill experiments."),(0,r.kt)("h3",{id:"simulate-disk-read-load-using-the-command-line-mode"},"Simulate disk read load using the command-line mode"),(0,r.kt)("h4",{id:"commands-for-simulating-disk-read-load"},"Commands for simulating disk read load"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"chaosd attack disk add-payload read -h\n")),(0,r.kt)("p",null,"The result is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"read payload\n\nUsage:\n  chaosd attack disk add-payload read [flags]\n\nFlags:\n  -h, --help                help for read\n  -p, --path string         'path' specifies the location to read data.If path not provided, payload will read from disk mount on \"/\"\n  -n, --process-num uint8   'process-num' specifies the number of process work on reading , default 1, only 1-255 is valid value (default 1)\n  -s, --size string         'size' specifies how many units of data will read from the file path.'unit' specifies the unit of data, support c=1, w=2, b=512, kB=1000, K=1024, MB=1000*1000,M=1024*1024, , GB=1000*1000*1000, G=1024*1024*1024 BYTESexample : 1M | 512kB\n\nGlobal Flags:\n      --log-level string   the log level of chaosd, the value can be 'debug', 'info', 'warn' and 'error'\n")),(0,r.kt)("h4",{id:"configuration-description-for-simulating-disk-read-load"},"Configuration description for simulating disk read load"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Configuration item"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Abbreviation"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"path")),(0,r.kt)("td",{parentName:"tr",align:"left"},"p"),(0,r.kt)("td",{parentName:"tr",align:"left"},'Specifies the file path to read the data. If this parameter is not specified, or the parameter value is set to an empty string, Chaosd reads from the virtual disk files mounted in the "/" directory. Depending on the permissions to read the files, you might be required to run this program using certain permissions.'),(0,r.kt)("td",{parentName:"tr",align:"left"},'type: string; default: ""')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"process-num")),(0,r.kt)("td",{parentName:"tr",align:"left"},"n"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Specifies the number of concurrent running ",(0,r.kt)("a",{parentName:"td",href:"https://man7.org/linux/man-pages/man1/dd.1.html"},"dd")," programs to be used."),(0,r.kt)("td",{parentName:"tr",align:"left"},"type: uint8; default: ",(0,r.kt)("inlineCode",{parentName:"td"},"1"),"; range: range: ",(0,r.kt)("inlineCode",{parentName:"td"},"1")," to ",(0,r.kt)("inlineCode",{parentName:"td"},"255"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"size")),(0,r.kt)("td",{parentName:"tr",align:"left"},"s"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Specifies the volume of data to be read. It is the total size of data that <0>dd</0> reads."),(0,r.kt)("td",{parentName:"tr",align:"left"},"type: string; default: ",(0,r.kt)("inlineCode",{parentName:"td"},'""'),"; ",(0,r.kt)("strong",{parentName:"td"},"required"),"; legal form: the combination of an integer and a unit. For example, 1M, 512kB. Supported units are c=1, w=2, b=512, kB=1000, K=1024, MB=1000","*","1000, M=1024","*","1024, GB=1000","*","1000","*","1000, G=1024","*","1024","*","1024","*","1024 BYTE and so on.")))),(0,r.kt)("h4",{id:"example-for-simulating-disk-read-load"},"Example for simulating disk read load"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"chaosd attack disk add-payload read -s 1000G -n 7 -p /dev/zero\n")),(0,r.kt)("p",null,"The result is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'andrew@LAPTOP-NUS30NQD:~/chaosd/bin$ ./chaosd attack disk add-payload read -s 1000G -n 7 -p /dev/zero\n[2021/05/20 13:54:31.323 +08:00] [INFO] [disk.go:128] ["5242880+0 records in\\n5242880+0 records out\\n5242880 bytes (5.2 MB, 5.0 MiB) copied, 4.13252 s, 1.3 MB/s\\n"]\n[2021/05/20 13:54:46.977 +08:00] [INFO] [disk.go:147] ["146285+0 records in\\n146285+0 records out\\n153390940160 bytes (153 GB, 143 GiB) copied, 15.6513 s, 9.8 GB/s\\n"]\n[2021/05/20 13:54:47.002 +08:00] [INFO] [disk.go:147] ["146285+0 records in\\n146285+0 records out\\n153390940160 bytes (153 GB, 143 GiB) copied, 15.6762 s, 9.8 GB/s\\n"]\n[2021/05/20 13:54:47.004 +08:00] [INFO] [disk.go:147] ["146285+0 records in\\n146285+0 records out\\n153390940160 bytes (153 GB, 143 GiB) copied, 15.6777 s, 9.8 GB/s\\n"]\n[2021/05/20 13:54:47.015 +08:00] [INFO] [disk.go:147] ["146285+0 records in\\n146285+0 records out\\n153390940160 bytes (153 GB, 143 GiB) copied, 15.6899 s, 9.8 GB/s\\n"]\n[2021/05/20 13:54:47.018 +08:00] [INFO] [disk.go:147] ["146285+0 records in\\n146285+0 records out\\n153390940160 bytes (153 GB, 143 GiB) copied, 15.6914 s, 9.8 GB/s\\n"]\n[2021/05/20 13:54:47.051 +08:00] [INFO] [disk.go:147] ["146285+0 records in\\n146285+0 records out\\n153390940160 bytes (153 GB, 143 GiB) copied, 15.7254 s, 9.8 GB/s\\n"]\n[2021/05/20 13:54:47.074 +08:00] [INFO] [disk.go:147] ["146285+0 records in\\n146285+0 records out\\n153390940160 bytes (153 GB, 143 GiB) copied, 15.7487 s, 9.7 GB/s\\n"]\nRead file /dev/zero successfully, uid: 4bc9b74a-5fe2-4038-b4f2-09ae95b57694\n')),(0,r.kt)("h3",{id:"simulate-disk-write-load-using-the-command-line-mode"},"Simulate disk write load using the command-line mode"),(0,r.kt)("h4",{id:"command-for-simulating-disk-write-load"},"Command for simulating disk write load"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"chaosd attack disk add-payload write -h\n")),(0,r.kt)("p",null,"The result is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"write payload\n\nUsage:\n  chaosd attack disk add-payload write [flags]\n\nFlags:\n  -h, --help                help for write\n  -p, --path string         'path' specifies the location to fill data in.If path not provided, payload will write into a temp file, temp file will be deleted after writing\n  -n, --process-num uint8   'process-num' specifies the number of process work on writing , default 1, only 1-255 is valid value (default 1)\n  -s, --size string         'size' specifies how many units of data will write into the file path.'unit' specifies the unit of data, support c=1, w=2, b=512, kB=1000, K=1024, MB=1000*1000,M=1024*1024, , GB=1000*1000*1000, G=1024*1024*1024 BYTESexample : 1M | 512kB\n\nGlobal Flags:\n      --log-level string   the log level of chaosd, the value can be 'debug', 'info', 'warn' and 'error'\n")),(0,r.kt)("h4",{id:"configuration-description-for-simulating-disk-write-load"},"Configuration description for simulating disk write load"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Configuration item"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Abbreviation"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"path ")),(0,r.kt)("td",{parentName:"tr",align:"left"},"p"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Specifies the file path to write the data. If this parameter is not specified, or the parameter value is set to an empty string, a temporary file will be created in the program execution directory. Depending on the permissions to write the files, you might be required to run this program using certain permissions."),(0,r.kt)("td",{parentName:"tr",align:"left"},"type: string; default: ",(0,r.kt)("inlineCode",{parentName:"td"},'""'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"process-num")),(0,r.kt)("td",{parentName:"tr",align:"left"},"n"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Specifies the number of concurrent running ",(0,r.kt)("a",{parentName:"td",href:"https://man7.org/linux/man-pages/man1/dd.1.html"},"dd")," programs to be used."),(0,r.kt)("td",{parentName:"tr",align:"left"},"type: uint8; default: ",(0,r.kt)("inlineCode",{parentName:"td"},"1"),"; range: range: ",(0,r.kt)("inlineCode",{parentName:"td"},"1")," to ",(0,r.kt)("inlineCode",{parentName:"td"},"255"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"size")),(0,r.kt)("td",{parentName:"tr",align:"left"},"s"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Specifies the volume of data to be read. It is the total size of data that <0>dd</0> reads."),(0,r.kt)("td",{parentName:"tr",align:"left"},"type: string; default: ",(0,r.kt)("inlineCode",{parentName:"td"},'""'),"; ",(0,r.kt)("strong",{parentName:"td"},"required"),"; legal form: the combination of an integer and a unit. For example, 1M, 512kB. Supported units are c=1, w=2, b=512, kB=1000, K=1024, MB=1000","*","1000, M=1024","*","1024, GB=1000","*","1000","*","1000, G=1024","*","1024","*","1024","*","1024 BYTE and so on.")))),(0,r.kt)("h4",{id:"example-for-simulating-disk-write-load"},"Example for simulating disk write load"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"chaosd attack disk add-payload write -s 2G -n 8\n")),(0,r.kt)("p",null,"The result is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'[2021/05/20 14:28:14.452 +08:00] [INFO] [disk.go:128] ["0+0 records in\\n0+0 records out\\n0 bytes copied, 4.3e-05 s, 0.0 kB/s\\n"]\n[2021/05/20 14:28:16.793 +08:00] [INFO] [disk.go:147] ["256+0 records in\\n256+0 records out\\n268435456 bytes (268 MB, 256 MiB) copied, 2.32841 s, 115 MB/s\\n"]\n[2021/05/20 14:28:16.793 +08:00] [INFO] [disk.go:147] ["256+0 records in\\n256+0 records out\\n268435456 bytes (268 MB, 256 MiB) copied, 2.3344 s, 115 MB/s\\n"]\n[2021/05/20 14:28:16.793 +08:00] [INFO] [disk.go:147] ["256+0 records in\\n256+0 records out\\n268435456 bytes (268 MB, 256 MiB) copied, 2.33312 s, 115 MB/s\\n"]\n[2021/05/20 14:28:16.793 +08:00] [INFO] [disk.go:147] ["256+0 records in\\n256+0 records out\\n268435456 bytes (268 MB, 256 MiB) copied, 2.33466 s, 115 MB/s\\n"]\n[2021/05/20 14:28:16.793 +08:00] [INFO] [disk.go:147] ["256+0 records in\\n256+0 records out\\n268435456 bytes (268 MB, 256 MiB) copied, 2.33189 s, 115 MB/s\\n"]\n[2021/05/20 14:28:16.793 +08:00] [INFO] [disk.go:147] ["256+0 records in\\n256+0 records out\\n268435456 bytes (268 MB, 256 MiB) copied, 2.33752 s, 115 MB/s\\n"]\n[2021/05/20 14:28:16.793 +08:00] [INFO] [disk.go:147] ["256+0 records in\\n256+0 records out\\n268435456 bytes (268 MB, 256 MiB) copied, 2.33295 s, 115 MB/s\\n"]\n[2021/05/20 14:28:16.794 +08:00] [INFO] [disk.go:147] ["256+0 records in\\n256+0 records out\\n268435456 bytes (268 MB, 256 MiB) copied, 2.3359 s, 115 MB/s\\n"]\nWrite file /home/andrew/chaosd/bin/example255569279 successfully, uid: e66afd86-6f3e-43a0-b161-09447ed84856\n')),(0,r.kt)("h3",{id:"simulate-disk-fill-using-the-command-line-mode"},"Simulate disk fill using the command-line mode"),(0,r.kt)("h4",{id:"command-for-simulating-disk-fill"},"Command for simulating disk fill"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"chaosd attack disk fill -h\n")),(0,r.kt)("p",null,"The result is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"fill disk\n\nUsage:\n  chaosd attack disk fill [flags]\n\nFlags:\n  -d, --destroy          destroy file after filled in or allocated\n  -f, --fallocate        fill disk by fallocate instead of dd (default true)\n  -h, --help             help for fill\n  -p, --path string      'path' specifies the location to fill data in.If path not provided, a temp file will be generated and deleted immediately after data filled in or allocated\n  -c, --percent string   'percent' how many percent data of disk will fill in the file path\n  -s, --size string      'size' specifies how many units of data will fill in the file path.'unit' specifies the unit of data, support c=1, w=2, b=512, kB=1000, K=1024, MB=1000*1000,M=1024*1024, , GB=1000*1000*1000, G=1024*1024*1024 BYTESexample : 1M | 512kB\n\nGlobal Flags:\n      --log-level string   the log level of chaosd, the value can be 'debug', 'info', 'warn' and 'error'\n")),(0,r.kt)("h4",{id:"configuration-description-for-simulating-disk-fill"},"Configuration description for simulating disk fill"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Configuration item"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Abbreviation"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"destroy")),(0,r.kt)("td",{parentName:"tr",align:"left"},"d"),(0,r.kt)("td",{parentName:"tr",align:"left"},"If this parameter is set to ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", the fill file is immediately deleted after being filled."),(0,r.kt)("td",{parentName:"tr",align:"left"},"type: bool; default: ",(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"fallocate")),(0,r.kt)("td",{parentName:"tr",align:"left"},"f"),(0,r.kt)("td",{parentName:"tr",align:"left"},"If this parameter is set to ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", Chaosd uses Linux to call ",(0,r.kt)("inlineCode",{parentName:"td"},"fallocate")," to apply for disk space quickly, and you must set ",(0,r.kt)("inlineCode",{parentName:"td"},"size")," to a value greater than ",(0,r.kt)("inlineCode",{parentName:"td"},"0"),". If this parameter is set to ",(0,r.kt)("inlineCode",{parentName:"td"},"false"),", Chaosd uses Linux to call dd to fill disks at a relatively slow pace."),(0,r.kt)("td",{parentName:"tr",align:"left"},"type: bool; default: ",(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"path")),(0,r.kt)("td",{parentName:"tr",align:"left"},"p"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Specifies the file path to write the data. If this parameter is not specified, or the parameter value is set to an empty string, a temporary file will be created in the program execution directory. Depending on the permissions to write the files, you might be required to run this program using certain permissions."),(0,r.kt)("td",{parentName:"tr",align:"left"},"type: string; default: ",(0,r.kt)("inlineCode",{parentName:"td"},'""'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"percent")),(0,r.kt)("td",{parentName:"tr",align:"left"},"c"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Specifies the percentage of disk size to be filled."),(0,r.kt)("td",{parentName:"tr",align:"left"},"type: string; default: ",(0,r.kt)("inlineCode",{parentName:"td"},'""'),"; positive integer of the uint type is acceptable; You must set one of ",(0,r.kt)("inlineCode",{parentName:"td"},"size")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"percent")," (both items ",(0,r.kt)("strong",{parentName:"td"},"cannot")," be ",(0,r.kt)("inlineCode",{parentName:"td"},'""')," at the same time).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"size")),(0,r.kt)("td",{parentName:"tr",align:"left"},"s"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Specifies the volume of data to be read."),(0,r.kt)("td",{parentName:"tr",align:"left"},"type: string; default: ",(0,r.kt)("inlineCode",{parentName:"td"},'""'),"; legal form: the combination of an integer and a unit. For example, 1M, 512kB. Supported units are c=1, w=2, b=512, kB=1000, K=1024, MB=1000","*","1000, M=1024","*","1024, GB=1000","*","1000","*","1000, G=1024","*","1024","*","1024","*","1024 BYTE and so on. You must set one of ",(0,r.kt)("inlineCode",{parentName:"td"},"size")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"percent")," (both items ",(0,r.kt)("strong",{parentName:"td"},"cannot")," be ",(0,r.kt)("inlineCode",{parentName:"td"},'""')," at the same time).")))),(0,r.kt)("h4",{id:"example-for-simulating-disk-fill"},"Example for simulating disk fill"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"chaosd attack disk fill -c 50 -d\n")),(0,r.kt)("p",null,"The result is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"[2021/05/20 14:30:02.943 +08:00] [INFO] [disk.go:215]\nFill file /home/andrew/chaosd/bin/example623832242 successfully, uid: 097b4214-8d8e-46ad-8768-c3e0d8cbb326\n")))}u.isMDXComponent=!0}}]);