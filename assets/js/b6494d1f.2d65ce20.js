"use strict";(self.webpackChunkchaos_mesh_website=self.webpackChunkchaos_mesh_website||[]).push([[8724],{68070:(e,t,a)=>{a.d(t,{Z:()=>c});var o=a(8714),n=a(43205),l=a(73622),r=a(85881),s=a(59496),i=a(16682),p=a.n(i),h=a(62125);const c=e=>{let{children:t,className:a="language-bash"}=e;const{siteConfig:i}=(0,n.Z)(),{versions:c}=(0,l.eZ)("docusaurus-plugin-content-docs");return s.createElement(o.Z,null,(()=>{const e=(0,h.p)(i,c),o="latest"===e?"":`--version ${(e=>{if(p().satisfies(e,">=2.0.3"))return e;const t=e.slice(0,3);return"v"+(parseFloat(t)-.7).toFixed(1)+e.slice(3)})(e)}`;return s.createElement(r.Z,{className:a},t.replace("--version latest",o).trim())}))}},62125:(e,t,a)=>{a.d(t,{Z:()=>p,p:()=>i});var o=a(8714),n=a(43205),l=a(73622),r=a(85881),s=a(59496);const i=(e,t)=>{const a=window.location.pathname;let o=window.localStorage.getItem("docs-preferred-version-default");if(a===e.baseUrl&&o)return"current"===o?"latest":o;if(a.includes("/docs/next"))return"latest";const n=t.find((e=>e.isLast)),l=t.find((e=>a.includes(e.name)));return l?l.name:n.name};const p=e=>{let{children:t,replaced:a="latest",isArchive:p=!1,className:h="language-bash"}=e;const{siteConfig:c}=(0,n.Z)(),{versions:m}=(0,l.eZ)("docusaurus-plugin-content-docs");return s.createElement(o.Z,null,(()=>{const e=i(c,m),o=p?t.replace(a,function(e){return"latest"===e?"refs/heads/master":`refs/tags/v${e}`}(e)):"latest"===e?t:t.replace(a,"v"+e);return s.createElement(r.Z,{className:h},o)}))}},72621:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var o=a(60795),n=(a(59496),a(49613));a(68070);const l={title:"Add a New Chaos Experiment Type"},r=void 0,s={unversionedId:"add-new-chaos-experiment-type",id:"version-2.6.2/add-new-chaos-experiment-type",title:"Add a New Chaos Experiment Type",description:"This document describes how to add a new chaos experiment type.",source:"@site/versioned_docs/version-2.6.2/add-new-chaos-experiment-type.md",sourceDirName:".",slug:"/add-new-chaos-experiment-type",permalink:"/docs/add-new-chaos-experiment-type",draft:!1,editUrl:"https://github.com/chaos-mesh/website/edit/master/versioned_docs/version-2.6.2/add-new-chaos-experiment-type.md",tags:[],version:"2.6.2",frontMatter:{title:"Add a New Chaos Experiment Type"},sidebar:"docs",previous:{title:"Configure the Development Environment",permalink:"/docs/configure-development-environment"},next:{title:"Extend Chaos Daemon Interface",permalink:"/docs/extend-chaos-daemon-interface"}},i={},p=[{value:"Step 1: Define the schema of HelloWorldChaos",id:"step-1-define-the-schema-of-helloworldchaos",level:2},{value:"Step 2: Register the CRD",id:"step-2-register-the-crd",level:2},{value:"Step 3: Register the event handler for helloworldchaos objects",id:"step-3-register-the-event-handler-for-helloworldchaos-objects",level:2},{value:"Step 4: Build Docker images",id:"step-4-build-docker-images",level:2},{value:"Step 5: Run HelloWorldChaos",id:"step-5-run-helloworldchaos",level:2},{value:"What&#39;s Next",id:"whats-next",level:2}],h={toc:p},c="wrapper";function m(e){let{components:t,...a}=e;return(0,n.kt)(c,(0,o.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"This document describes how to add a new chaos experiment type."),(0,n.kt)("p",null,"The following walks you through an example of ",(0,n.kt)("inlineCode",{parentName:"p"},"HelloWorldChaos"),", a new chaos experiment type that prints ",(0,n.kt)("inlineCode",{parentName:"p"},"Hello world!")," to the log. The steps include:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#step-1-define-the-schema-of-helloworldchaos"},"Step 1: Define the schema of HelloWorldChaos")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#step-2-register-the-crd"},"Step 2: Register the CRD")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#step-3-register-the-event-handler-for-helloworldchaos-objects"},"Step 3: Register the event handler for helloworld objects")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#step-4-build-docker-images"},"Step 4: Build Docker images")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#step-5-run-helloworldchaos"},"Step 5: Run HelloWorldChaos"))),(0,n.kt)("h2",{id:"step-1-define-the-schema-of-helloworldchaos"},"Step 1: Define the schema of HelloWorldChaos"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Add ",(0,n.kt)("inlineCode",{parentName:"p"},"helloworldchaos_types.go")," to the ",(0,n.kt)("inlineCode",{parentName:"p"},"api/v1alpha1")," API directory with the following content:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-go"},'package v1alpha1\n\nimport (\n        metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"\n)\n\n// +kubebuilder:object:root=true\n// +chaos-mesh:experiment\n// +chaos-mesh:oneshot=true\n\n// HelloWorldChaos is the Schema for the helloworldchaos API\ntype HelloWorldChaos struct {\n        metav1.TypeMeta   `json:",inline"`\n        metav1.ObjectMeta `json:"metadata,omitempty"`\n\n        Spec   HelloWorldChaosSpec   `json:"spec"`\n        Status HelloWorldChaosStatus `json:"status,omitempty"`\n}\n\n// HelloWorldChaosSpec defines the desired state of HelloWorldChaos\ntype HelloWorldChaosSpec struct {\n        // ContainerSelector specifies the target for injection\n        ContainerSelector `json:",inline"`\n\n        // Duration represents the duration of the chaos\n        // +optional\n        Duration *string `json:"duration,omitempty"`\n\n        // RemoteCluster represents the remote cluster where the chaos will be deployed\n        // +optional\n        RemoteCluster string `json:"remoteCluster,omitempty"`\n}\n\n// HelloWorldChaosStatus defines the observed state of HelloWorldChaos\ntype HelloWorldChaosStatus struct {\n        ChaosStatus `json:",inline"`\n}\n\n// GetSelectorSpecs is a getter for selectors\nfunc (obj *HelloWorldChaos) GetSelectorSpecs() map[string]interface{} {\n        return map[string]interface{}{\n                ".": &obj.Spec.ContainerSelector,\n        }\n}\n')),(0,n.kt)("p",{parentName:"li"},"This file defines the schema type of ",(0,n.kt)("inlineCode",{parentName:"p"},"HelloWorldChaos"),", which can be described in a YAML file:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: chaos-mesh.org/v1alpha1\nkind: HelloWorldChaos\nmetadata:\n  name: <resource name>\n  namespace: <namespace>\nspec:\n  duration: <duration>\n#...\n")))),(0,n.kt)("h2",{id:"step-2-register-the-crd"},"Step 2: Register the CRD"),(0,n.kt)("p",null,"You need to register the CRD (Custom Resource Definition) of ",(0,n.kt)("inlineCode",{parentName:"p"},"HelloWorldChaos")," to interact it with Kubernetes API."),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"To combine the CRD into manifests/crd.yaml, append ",(0,n.kt)("inlineCode",{parentName:"p"},"config/crd/bases/chaos-mesh.org_helloworldchaos.yaml")," we generated in the previous step to ",(0,n.kt)("inlineCode",{parentName:"p"},"config/crd/kustomization.yaml"),":"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"resources:\n  - bases/chaos-mesh.org_podchaos.yaml\n  - bases/chaos-mesh.org_networkchaos.yaml\n  - bases/chaos-mesh.org_iochaos.yaml\n  - bases/chaos-mesh.org_helloworldchaos.yaml # This is the new line\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Run ",(0,n.kt)("inlineCode",{parentName:"p"},"make generate")," in the root directory of Chaos Mesh, which generates a boilerplate of ",(0,n.kt)("inlineCode",{parentName:"p"},"HelloWorldChaos")," for Chaos Mesh to compile:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"make generate\n")),(0,n.kt)("p",{parentName:"li"},"Then you can see the definition of ",(0,n.kt)("inlineCode",{parentName:"p"},"HelloWorldChaos")," in ",(0,n.kt)("inlineCode",{parentName:"p"},"manifests/crd.yaml"),"."))),(0,n.kt)("h2",{id:"step-3-register-the-event-handler-for-helloworldchaos-objects"},"Step 3: Register the event handler for helloworldchaos objects"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Create a new file ",(0,n.kt)("inlineCode",{parentName:"p"},"controllers/chaosimpl/helloworldchaos/types.go")," with the following content:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-go"},'package helloworldchaos\n\nimport (\n        "context"\n\n        "github.com/go-logr/logr"\n        "go.uber.org/fx"\n        "sigs.k8s.io/controller-runtime/pkg/client"\n\n        "github.com/chaos-mesh/chaos-mesh/api/v1alpha1"\n        impltypes "github.com/chaos-mesh/chaos-mesh/controllers/chaosimpl/types"\n        "github.com/chaos-mesh/chaos-mesh/controllers/chaosimpl/utils"\n)\n\nvar _ impltypes.ChaosImpl = (*Impl)(nil)\n\ntype Impl struct {\n        client.Client\n        Log logr.Logger\n\n        decoder *utils.ContainerRecordDecoder\n}\n\n// This corresponds to the Apply phase of HelloWorldChaos. The execution of HelloWorldChaos will be triggered.\nfunc (impl *Impl) Apply(ctx context.Context, index int, records []*v1alpha1.Record, obj v1alpha1.InnerObject) (v1alpha1.Phase, error) {\n        impl.Log.Info("Hello world!")\n        return v1alpha1.Injected, nil\n}\n\n// This corresponds to the Recover phase of HelloWorldChaos. The reconciler will be triggered to recover the chaos action.\nfunc (impl *Impl) Recover(ctx context.Context, index int, records []*v1alpha1.Record, obj v1alpha1.InnerObject) (v1alpha1.Phase, error) {\n        impl.Log.Info("Goodbye world!")\n        return v1alpha1.NotInjected, nil\n}\n\n// NewImpl returns a new HelloWorldChaos implementation instance.\nfunc NewImpl(c client.Client, log logr.Logger, decoder *utils.ContainerRecordDecoder) *impltypes.ChaosImplPair {\n        return &impltypes.ChaosImplPair{\n                Name:   "helloworldchaos",\n                Object: &v1alpha1.HelloWorldChaos{},\n                Impl: &Impl{\n                        Client:  c,\n                        Log:     log.WithName("helloworldchaos"),\n                        decoder: decoder,\n                },\n                ObjectList: &v1alpha1.HelloWorldChaosList{},\n     }\n}\n\nvar Module = fx.Provide(\n         fx.Annotated{\n                 Group:  "impl",\n                 Target: NewImpl,\n         },\n)\n'))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Chaos Mesh uses the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/uber-go/fx"},"fx")," library for dependency injection. To register ",(0,n.kt)("inlineCode",{parentName:"p"},"HelloWorldChaos")," in the controller manager, add a line to ",(0,n.kt)("inlineCode",{parentName:"p"},"controllers/chaosimpl/fx.go"),":"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-go"},"var AllImpl = fx.Options(\n        gcpchaos.Module,\n        stresschaos.Module,\n        jvmchaos.Module,\n        timechaos.Module,\n        helloworldchaos.Module // Add a new line. Make sure you have imported helloworldchaos first.\n        //...\n)\n")),(0,n.kt)("p",{parentName:"li"},"Then in ",(0,n.kt)("inlineCode",{parentName:"p"},"controllers/types/types.go"),", append the following content into ",(0,n.kt)("inlineCode",{parentName:"p"},"ChaosObjects"),":"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-go"},'var ChaosObjects = fx.Supply(\n       //...\n       fx.Annotated{\n               Group: "objs",\n               Target: Object{\n                       Name:   "helloworldchaos",\n                       Object: &v1alpha1.HelloWorldChaos{},\n               },\n       },\n)\n')))),(0,n.kt)("h2",{id:"step-4-build-docker-images"},"Step 4: Build Docker images"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Build the production images:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"make image\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"If you deploy the Kubernetes cluster using minikube, then you need to load images into the cluster:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"minikube image load ghcr.io/chaos-mesh/chaos-dashboard:latest\nminikube image load ghcr.io/chaos-mesh/chaos-mesh:latest\nminikube image load ghcr.io/chaos-mesh/chaos-daemon:latest\n")))),(0,n.kt)("h2",{id:"step-5-run-helloworldchaos"},"Step 5: Run HelloWorldChaos"),(0,n.kt)("p",null,"In this step, you need to deploy Chaos Mesh with your latest changes to test HelloWorldChaos."),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Register the CRD in your cluster:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl create -f manifests/crd.yaml\n")),(0,n.kt)("p",{parentName:"li"},"You can see ",(0,n.kt)("inlineCode",{parentName:"p"},"HelloWorldChaos")," is created from the output:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-log"},"customresourcedefinition.apiextensions.k8s.io/helloworldchaos.chaos-mesh.org created\n")),(0,n.kt)("p",{parentName:"li"},"Now you can get the CRD of ",(0,n.kt)("inlineCode",{parentName:"p"},"HelloWorldChaos")," using the command below:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get crd helloworldchaos.chaos-mesh.org\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Deploy Chaos Mesh:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"helm install chaos-mesh helm/chaos-mesh -n=chaos-mesh --set controllerManager.leaderElection.enabled=false,dashboard.securityMode=false\n")),(0,n.kt)("p",{parentName:"li"},"To verify the deployment is successful, you can check all Pods in the ",(0,n.kt)("inlineCode",{parentName:"p"},"chaos-mesh")," namespace:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods --namespace chaos-mesh -l app.kubernetes.io/instance=chaos-mesh\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Deploy a deployment for testing, we can use an example echo server from minikube docs:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl create deployment hello-minikube --image=kicbase/echo-server:1.0\n")),(0,n.kt)("p",{parentName:"li"},"Wait to see the pod is running:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods\n")),(0,n.kt)("p",{parentName:"li"},"Example output:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-log"},"NAME                              READY   STATUS    RESTARTS   AGE\nhello-minikube-77b6f68484-dg4sw   1/1     Running   0          2m\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Create a ",(0,n.kt)("inlineCode",{parentName:"p"},"hello.yaml")," file with the following content:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: chaos-mesh.org/v1alpha1\nkind: HelloWorldChaos\nmetadata:\n  name: hello-world\n  namespace: chaos-mesh\nspec:\n  selector:\n    labelSelectors:\n      app: hello-minikube\n  mode: one\n  duration: 1h\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Run:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f hello.yaml\n# helloworldchaos.chaos-mesh.org/hello-world created\n")),(0,n.kt)("p",{parentName:"li"},"Now you can check if ",(0,n.kt)("inlineCode",{parentName:"p"},"chaos-controller-manager")," has ",(0,n.kt)("inlineCode",{parentName:"p"},"Hello world!")," in its logs:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl logs -n chaos-mesh chaos-controller-manager-xxx\n")),(0,n.kt)("p",{parentName:"li"},"Example output:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-txt"},'2023-07-16T06:19:40.068Z INFO records records/controller.go:149 apply chaos {"id": "default/hello-minikube-77b6f68484-dg4sw/echo-server"}\n2023-07-16T06:19:40.068Z INFO helloworldchaos helloworldchaos/types.go:26 Hello world!\n')))),(0,n.kt)("h2",{id:"whats-next"},"What's Next"),(0,n.kt)("p",null,"If you encounter any problems during the process, create an ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/chaos-mesh/chaos-mesh/issues"},"issue")," in the Chaos Mesh repository."),(0,n.kt)("p",null,"In the next section, we'll learn more about how to extend the behavior of ",(0,n.kt)("inlineCode",{parentName:"p"},"HelloWorldChaos"),"."))}m.isMDXComponent=!0}}]);