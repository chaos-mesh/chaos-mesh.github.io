"use strict";(self.webpackChunkchaos_mesh_website=self.webpackChunkchaos_mesh_website||[]).push([[43292],{49613:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var a=n(59496);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),s=d(n),u=l,k=s["".concat(p,".").concat(u)]||s[u]||c[u]||r;return n?a.createElement(k,i(i({ref:t},m),{},{components:n})):a.createElement(k,i({ref:t},m))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[s]="string"==typeof e?e:l,i[1]=o;for(var d=2;d<r;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},10197:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=n(60795),l=(n(59496),n(49613));const r={title:"Simulate Block Device Incidents"},i=void 0,o={unversionedId:"simulate-block-chaos-on-kubernetes",id:"simulate-block-chaos-on-kubernetes",title:"Simulate Block Device Incidents",description:"BlockChaos Introduction",source:"@site/docs/simulate-block-chaos-on-kubernetes.md",sourceDirName:".",slug:"/simulate-block-chaos-on-kubernetes",permalink:"/docs/next/simulate-block-chaos-on-kubernetes",draft:!1,editUrl:"https://github.com/chaos-mesh/website/edit/master/docs/simulate-block-chaos-on-kubernetes.md",tags:[],version:"current",frontMatter:{title:"Simulate Block Device Incidents"},sidebar:"docs",previous:{title:"Simulate HTTP faults",permalink:"/docs/next/simulate-http-chaos-on-kubernetes"},next:{title:"Chaosd Introduction",permalink:"/docs/next/chaosd-overview"}},p={},d=[{value:"BlockChaos Introduction",id:"blockchaos-introduction",level:2},{value:"Install kernel module",id:"install-kernel-module",level:2},{value:"Create experiments using the YAML file",id:"create-experiments-using-the-yaml-file",level:2}],m={toc:d},s="wrapper";function c(e){let{components:t,...n}=e;return(0,l.kt)(s,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"blockchaos-introduction"},"BlockChaos Introduction"),(0,l.kt)("p",null,"Chaos Mesh provides the BlockChaos experiment type. You can use this experiment type to simulate a block device latency or freeze scenario. This document describes how to install the dependencies of a BlockChaos experiment, and create a BlockChaos."),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"BlockChaos is in an early stage. The installation and configuration experience of it will continue to improve. If you find any issues, please open an issue in ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/chaos-mesh/chaos-mesh"},"chaos-mesh/chaos-mesh")," to report.")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"BlockChaos ",(0,l.kt)("inlineCode",{parentName:"p"},"freeze")," action will affect all processes using the block device, not only the target container.")),(0,l.kt)("h2",{id:"install-kernel-module"},"Install kernel module"),(0,l.kt)("p",null,"BlockChaos ",(0,l.kt)("inlineCode",{parentName:"p"},"delay")," action depends on the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/chaos-mesh/chaos-driver"},"chaos-driver")," kernel module. It can only be injected on a machine with this module installed. Currently, you have to compile and install the module manually."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Download the source code of this module using the following command:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl -fsSL -o chaos-driver-v0.2.1.tar.gz https://github.com/chaos-mesh/chaos-driver/archive/refs/tags/v0.2.1.tar.gz\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Uncompress the ",(0,l.kt)("inlineCode",{parentName:"p"},"chaos-driver-v0.2.1.tar.gz")," file:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"tar xvf chaos-driver-v0.2.1.tar.gz\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Prepare the headers of your current kernel. If you are using CentOS/Fedora, you can install the kernel headers with ",(0,l.kt)("inlineCode",{parentName:"p"},"yum"),":"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"yum install kernel-devel-$(uname -r)\n")),(0,l.kt)("p",{parentName:"li"},"If you are using Ubuntu/Debian, you can install the kernel headers with ",(0,l.kt)("inlineCode",{parentName:"p"},"apt"),":"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"apt install linux-headers-$(uname -r)\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Compile the module:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cd chaos-driver-v0.2.1\nmake driver/chaos_driver.ko\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Install the kernel module:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"insmod ./driver/chaos_driver.ko\n")))),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"chaos_driver")," module has to be installed every time after rebooting. To load the module automatically, you can copy the module to a subdirectory in ",(0,l.kt)("inlineCode",{parentName:"p"},"/lib/modules/$(uname -r)/kernel/drivers"),", run ",(0,l.kt)("inlineCode",{parentName:"p"},"depmod -a"),", and then add ",(0,l.kt)("inlineCode",{parentName:"p"},"chaos_driver")," to the ",(0,l.kt)("inlineCode",{parentName:"p"},"/etc/modules"),"."),(0,l.kt)("p",null,"If you have upgraded the kernel, the module should be recompiled."),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"It is recommended to use DKMS or akmod for automatic kernel module compiling or loading. If you want to help us improve the installation experience, creating a DKMS or akmod package and submitting it to different distribution repositories is very welcome.")),(0,l.kt)("h2",{id:"create-experiments-using-the-yaml-file"},"Create experiments using the YAML file"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Write the experiment configuration to the YAML configuration file. The following uses the ",(0,l.kt)("inlineCode",{parentName:"p"},"block-latency.yaml")," file as an example."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: chaos-mesh.org/v1alpha1\nkind: BlockChaos\nmetadata:\n  name: hostpath-example-delay\nspec:\n  selector:\n    labelSelectors:\n      app: hostpath-example\n  mode: all\n  volumeName: hostpath-example\n  action: delay\n  delay:\n    latency: 1s\n")),(0,l.kt)("admonition",{parentName:"li",type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Only hostpath or localvolume is supported."))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"kubectl")," to create an experiment:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f block-latency.yaml\n")))),(0,l.kt)("p",null,"You can find the following magic happened:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The elevator of the volume is changed to ",(0,l.kt)("inlineCode",{parentName:"li"},"ioem")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"ioem-mq"),". You can check it through ",(0,l.kt)("inlineCode",{parentName:"li"},"cat /sys/block/<device>/queue/scheduler"),"."),(0,l.kt)("li",{parentName:"ol"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"ioem")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"ioem-mq")," scheduler will receive the latency request and delay the request for the specified time.")),(0,l.kt)("p",null,"The fields in the YAML configuration file are described in the following table:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Note"),(0,l.kt)("th",{parentName:"tr",align:null},"Default value"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"mode")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Specifies the mode of the experiment. The mode options include ",(0,l.kt)("inlineCode",{parentName:"td"},"one")," (selecting a random Pod), ",(0,l.kt)("inlineCode",{parentName:"td"},"all")," (selecting all eligible Pods), ",(0,l.kt)("inlineCode",{parentName:"td"},"fixed")," (selecting a specified number of eligible Pods), ",(0,l.kt)("inlineCode",{parentName:"td"},"fixed-percent")," (selecting a specified percentage of Pods from the eligible Pods), and ",(0,l.kt)("inlineCode",{parentName:"td"},"random-max-percent")," (selecting the maximum percentage of Pods from the eligible Pods)."),(0,l.kt)("td",{parentName:"tr",align:null},"None"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"one"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"value")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Provides parameters for the ",(0,l.kt)("inlineCode",{parentName:"td"},"mode")," configuration, depending on ",(0,l.kt)("inlineCode",{parentName:"td"},"mode"),". For example, when ",(0,l.kt)("inlineCode",{parentName:"td"},"mode")," is set to ",(0,l.kt)("inlineCode",{parentName:"td"},"fixed-percent"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"value")," specifies the percentage of Pods."),(0,l.kt)("td",{parentName:"tr",align:null},"None"),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"1"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"selector")),(0,l.kt)("td",{parentName:"tr",align:null},"struct"),(0,l.kt)("td",{parentName:"tr",align:null},"Specifies the target Pod. For details, refer to ",(0,l.kt)("a",{parentName:"td",href:"/docs/next/define-chaos-experiment-scope"},"Define the experiment scope"),"."),(0,l.kt)("td",{parentName:"tr",align:null},"None"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"volumeName")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Specifies the volume to inject in the target pods. There should be a corresponding entry in the pods' ",(0,l.kt)("inlineCode",{parentName:"td"},".spec.volumes"),"."),(0,l.kt)("td",{parentName:"tr",align:null},"None"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"hostpath-example"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"action")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Indicates the specific type of faults. The available fault types include ",(0,l.kt)("inlineCode",{parentName:"td"},"delay")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"freeze"),". ",(0,l.kt)("inlineCode",{parentName:"td"},"delay")," will simulate the latency of block devices, and ",(0,l.kt)("inlineCode",{parentName:"td"},"freeze")," will simulate that the block device cannot handle any requests"),(0,l.kt)("td",{parentName:"tr",align:null},"None"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"delay"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"delay.latency")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Specifies the latency of the block device."),(0,l.kt)("td",{parentName:"tr",align:null},"None"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes (if ",(0,l.kt)("inlineCode",{parentName:"td"},"action")," is ",(0,l.kt)("inlineCode",{parentName:"td"},"delay"),")"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"500ms"))))))}c.isMDXComponent=!0}}]);