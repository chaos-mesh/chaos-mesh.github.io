"use strict";(self.webpackChunkchaos_mesh_website=self.webpackChunkchaos_mesh_website||[]).push([[56143],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=s,h=u["".concat(i,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(h,a(a({ref:t},p),{},{components:n})):r.createElement(h,a({ref:t},p))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:s,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},30643:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(87462),s=(n(67294),n(3905));const o={title:"Define the Scope of Chaos Experiment"},a=void 0,l={unversionedId:"user_guides/experiment_scope",id:"version-1.0.3/user_guides/experiment_scope",title:"Define the Scope of Chaos Experiment",description:"This document describes how to define the scope of a chaos experiment.",source:"@site/versioned_docs/version-1.0.3/user_guides/experiment_scope.md",sourceDirName:"user_guides",slug:"/user_guides/experiment_scope",permalink:"/zh/docs/1.0.3/user_guides/experiment_scope",draft:!1,editUrl:"https://github.com/chaos-mesh/website/edit/master/versioned_docs/version-1.0.3/user_guides/experiment_scope.md",tags:[],version:"1.0.3",frontMatter:{title:"Define the Scope of Chaos Experiment"},sidebar:"version-1.0.3/docs",previous:{title:"Installation",permalink:"/zh/docs/1.0.3/user_guides/installation"},next:{title:"Run Chaos Experiment",permalink:"/zh/docs/1.0.3/user_guides/run_chaos_experiment"}},i={},c=[{value:"Namespace selectors",id:"namespace-selectors",level:2},{value:"Label selectors",id:"label-selectors",level:2},{value:"Annotation selectors",id:"annotation-selectors",level:2},{value:"Field selectors",id:"field-selectors",level:2},{value:"Pod phase selectors",id:"pod-phase-selectors",level:2},{value:"Pod selectors",id:"pod-selectors",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"This document describes how to define the scope of a chaos experiment."),(0,s.kt)("p",null,"Chaos Mesh provides a variety of selectors, which you can use to define the scope of your chaos experiment. These selectors are defined in the ",(0,s.kt)("inlineCode",{parentName:"p"},"spec.selector")," field of the chaos object."),(0,s.kt)("h2",{id:"namespace-selectors"},"Namespace selectors"),(0,s.kt)("p",null,"Namespace selectors filter the chaos experiment targets by the namespace. Defined as a set of strings. The default namespace selector for Chaos Mesh is the chaos experiment object. For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"spec:\n  selector:\n    namespaces:\n      - 'app-ns'\n")),(0,s.kt)("h2",{id:"label-selectors"},"Label selectors"),(0,s.kt)("p",null,"Label selectors filter chaos experiment targets by the label. Defined as a map of string keys and values. For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"spec:\n  selector:\n    labelSelectors:\n      'app.kubernetes.io/component': 'tikv'\n")),(0,s.kt)("h2",{id:"annotation-selectors"},"Annotation selectors"),(0,s.kt)("p",null,"Annotation selectors filter chaos experiment targets by the annotation. Defined as a map of string keys and values. For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"spec:\n  selector:\n    annotationSelectors:\n      'example-annotation': 'group-a'\n")),(0,s.kt)("h2",{id:"field-selectors"},"Field selectors"),(0,s.kt)("p",null,"Field selectors filter chaos experiment targets by the resource field. Defined as a map of string keys and values. For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"spec:\n  selector:\n    fieldSelectors:\n      'metadata.name': 'my-pod'\n")),(0,s.kt)("p",null,"For more details about field selectors, refer to the ",(0,s.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors/"},"Kubernetes document"),"."),(0,s.kt)("h2",{id:"pod-phase-selectors"},"Pod phase selectors"),(0,s.kt)("p",null,"Pod Phase selectors filter chaos experiment targets by the condition. Defined as a set of string. Supported conditions: ",(0,s.kt)("inlineCode",{parentName:"p"},"Pending"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"Running"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"Succeeded"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"Failed"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"Unknown"),". For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"spec:\n  selector:\n    podPhaseSelectors:\n      - 'Running'\n")),(0,s.kt)("h2",{id:"pod-selectors"},"Pod selectors"),(0,s.kt)("p",null,"Pod selectors filter chaos experiment targets by the pod. Defined as a map of string keys and values. The key in this map specifies the namespace which the pods belong to, and each value under the key is a pod. If this selector is not empty, these pod defined in this map are used directly and other defined selectors will be ignored. For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"spec:\n  selector:\n    pods:\n      tidb-cluster: # namespace of the target pods\n        - basic-tidb-0\n        - basic-pd-0\n        - basic-tikv-0\n        - basic-tikv-1\n")))}d.isMDXComponent=!0}}]);