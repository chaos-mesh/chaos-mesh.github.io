"use strict";(self.webpackChunkchaos_mesh_website=self.webpackChunkchaos_mesh_website||[]).push([[4309],{89400:function(e,t,n){var s=n(91262),a=n(16213),r=n(67294),o=n(81249),i=n.n(o),c=n(52263),l=n(56871),p=n(28084);t.Z=function(e){var t=e.children,n=e.className,o=void 0===n?"language-bash":n,h=(0,c.Z)().siteConfig,u=(0,p.usePluginData)("docusaurus-plugin-content-docs").versions;return r.createElement(s.Z,null,(function(){var e=(0,l.p)(h,u),n="latest"===e?"":"--version "+function(e){if(i().satisfies(e,">=2.0.3"))return e;var t=e.slice(0,3);return"v"+(parseFloat(t)-.7)+e.slice(3)}(e);return r.createElement(a.Z,{className:o},t.replace("--version latest",n).trim())}))}},56871:function(e,t,n){n.d(t,{p:function(){return c}});var s=n(91262),a=n(16213),r=n(67294),o=n(52263),i=n(28084),c=function(e,t){var n=window.location.pathname,s=window.localStorage.getItem("docs-preferred-version-default");if(n===e.baseUrl&&s)return"current"===s?"latest":s;if(n.includes("/docs/next"))return"latest";var a=t.filter((function(e){return e.isLast}))[0].name;return t.filter((function(e){return n.includes(e.name)})).map((function(e){return e.name}))[0]||a};t.Z=function(e){var t=e.children,n=e.replaced,l=void 0===n?"latest":n,p=e.isArchive,h=void 0!==p&&p,u=e.className,m=void 0===u?"language-bash":u,d=(0,o.Z)().siteConfig,f=(0,i.usePluginData)("docusaurus-plugin-content-docs").versions;return r.createElement(s.Z,null,(function(){var e=c(d,f),n=h?t.replace(l,function(e){return"latest"===e?"refs/heads/master":"refs/tags/v"+e}(e)):"latest"===e?t:t.replace(l,"v"+e);return r.createElement(a.Z,{className:m},n)}))}},77817:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return h},default:function(){return m}});var s=n(87462),a=n(63366),r=(n(67294),n(3905)),o=n(89400),i=["components"],c={title:"DNSChaos Experiment"},l=void 0,p={unversionedId:"chaos_experiments/dnschaos",id:"version-1.2.4/chaos_experiments/dnschaos",isDocsHomePage:!1,title:"DNSChaos Experiment",description:"This document describes how to create DNSChaos experiments in Chaos Mesh.",source:"@site/versioned_docs/version-1.2.4/chaos_experiments/dnschaos.md",sourceDirName:"chaos_experiments",slug:"/chaos_experiments/dnschaos",permalink:"/zh/docs/1.2.4/chaos_experiments/dnschaos",editUrl:"https://github.com/chaos-mesh/website/edit/master/versioned_docs/version-1.2.4/chaos_experiments/dnschaos.md",tags:[],version:"1.2.4",frontMatter:{title:"DNSChaos Experiment"},sidebar:"version-1.2.4/docs",previous:{title:"KernelChaos Experiment",permalink:"/zh/docs/1.2.4/chaos_experiments/kernelchaos"},next:{title:"AwsChaos Experiment",permalink:"/zh/docs/1.2.4/chaos_experiments/awschaos"}},h=[{value:"Deploy DNS service for chaos",id:"deploy-dns-service-for-chaos",children:[]},{value:"Configuration file",id:"configuration-file",children:[]},{value:"Fields description",id:"fields-description",children:[]},{value:"Notes",id:"notes",children:[]}],u={toc:h};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,s.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This document describes how to create DNSChaos experiments in Chaos Mesh."),(0,r.kt)("p",null,"DNSChaos allows you to simulate fault DNS responses such as a DNS error or a random IP address after a request is sent."),(0,r.kt)("h2",{id:"deploy-dns-service-for-chaos"},"Deploy DNS service for chaos"),(0,r.kt)("p",null,"To create DNSChaos experiments in Chaos Mesh, you need to deploy a DNS service in Chaos Mesh by executing the command below:"),(0,r.kt)(o.Z,{className:"language-bash",mdxType:"PickHelmVersion"},"helm upgrade chaos-mesh chaos-mesh/chaos-mesh --namespace=chaos-testing --version latest --set dnsServer.create=true"),(0,r.kt)("p",null,"When the deployment finishes, check the status of this DNS service:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods -n chaos-testing -l app.kubernetes.io/component=chaos-dns-server\n")),(0,r.kt)("p",null,"Make sure the Pod's ",(0,r.kt)("inlineCode",{parentName:"p"},"STATUS")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"Running"),"."),(0,r.kt)("h2",{id:"configuration-file"},"Configuration file"),(0,r.kt)("p",null,"Below is a sample DNSChaos configuration file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: chaos-mesh.org/v1alpha1\nkind: DNSChaos\nmetadata:\n  name: busybox-dns-chaos\nspec:\n  action: random\n  patterns:\n    - google.com\n    - chaos-mesh.*\n    - github.?om\n  mode: all\n  selector:\n    namespaces:\n      - busybox\n  duration: '90s'\n  scheduler:\n    cron: '@every 100s'\n")),(0,r.kt)("p",null,"For more sample files, see ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/chaos-mesh/chaos-mesh/tree/master/examples"},"examples"),". You can edit them as needed."),(0,r.kt)("h2",{id:"fields-description"},"Fields description"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"action"),": Defines the chaos action for DNSChaos. Supported actions are:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"error")," - Get an error when sending the DNS request"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"random")," - Get a random IP when sending the DNS request"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"patterns"),": Choose which domain names to take effect, support the placeholder ? and wildcard ","*",", or the specified domain name."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The wildcard ",(0,r.kt)("inlineCode",{parentName:"li"},"_")," must be at the end of the string. For example, ",(0,r.kt)("inlineCode",{parentName:"li"},"chaos-_.org")," is invalid."),(0,r.kt)("li",{parentName:"ul"},"If the patterns is empty, will take effect on all the domain names."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"selector"),": Specifies the target pods for chaos injection. For more details, see ",(0,r.kt)("a",{parentName:"p",href:"/zh/docs/1.2.4/user_guides/experiment_scope"},"Define the Scope of Chaos Experiment"),"."))),(0,r.kt)("h2",{id:"notes"},"Notes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Currently, DNSChaos only supports record types ",(0,r.kt)("inlineCode",{parentName:"p"},"A")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"AAAA"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The chaos DNS service runs CoreDNS with the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/chaos-mesh/k8s_dns_chaos"},"k8s_dns_chaos")," plugin. If the CoreDNS service in your Kubernetes cluster contains some special configurations, you can edit configMap ",(0,r.kt)("inlineCode",{parentName:"p"},"dns-server-config")," to make the configuration of the chaos DNS service consistent with that of the K8s CoreDNS service as shown below:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl edit configmap dns-server-config -n chaos-testing\n")))))}m.isMDXComponent=!0}}]);